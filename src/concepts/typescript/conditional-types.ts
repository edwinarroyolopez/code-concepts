import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Tipos Condicionales en TypeScript",
    en: "Conditional Types in TypeScript"
  },
  slug: "conditional-types",
  description: {
    es: "Los tipos condicionales en TypeScript permiten definir tipos basados en condiciones, lo que facilita la creaci√≥n de tipos din√°micos y flexibles. Son √∫tiles para escribir c√≥digo gen√©rico y reutilizable.",
    en: "Conditional types in TypeScript allow defining types based on conditions, making it easier to create dynamic and flexible types. They are useful for writing generic and reusable code."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los Tipos Condicionales?",
        en: "üîπWhat are Conditional Types?"
      },
      code: `// Tipo condicional b√°sico
type IsString<T> = T extends string ? true : false;

// Ejemplo de uso
type Result1 = IsString<string>; // true
type Result2 = IsString<number>; // false

// Tipo condicional con distribuci√≥n
type NonNullable<T> = T extends null | undefined ? never : T;

// Ejemplo de uso
type Example = NonNullable<string | null>; // string`,
      content: {
        es: "Un **tipo condicional** en TypeScript permite definir un tipo basado en una condici√≥n, similar a una expresi√≥n ternaria en JavaScript. La sintaxis b√°sica es `T extends U ? X : Y`, donde `T` es el tipo a evaluar, `U` es la condici√≥n, y `X` e `Y` son los tipos resultantes si la condici√≥n es verdadera o falsa, respectivamente. Los tipos condicionales son especialmente √∫tiles para escribir c√≥digo gen√©rico y reutilizable, ya que permiten adaptar tipos din√°micamente seg√∫n las necesidades del contexto.",
        en: "A **conditional type** in TypeScript allows defining a type based on a condition, similar to a ternary expression in JavaScript. The basic syntax is `T extends U ? X : Y`, where `T` is the type being evaluated, `U` is the condition, and `X` and `Y` are the resulting types if the condition is true or false, respectively. Conditional types are especially useful for writing generic and reusable code, as they allow adapting types dynamically based on the context's needs."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Tipos Condicionales?",
        en: "üîπWhen to use Conditional Types?"
      },
      content: {
        es: [
          "Cuando necesitas definir tipos din√°micos que dependen de otras condiciones.",
          "Cuando deseas crear utilidades de tipo reutilizables que funcionen con m√∫ltiples tipos.",
          "Cuando trabajas con tipos gen√©ricos y necesitas adaptar el tipo resultante seg√∫n ciertas condiciones.",
          "Cuando necesitas implementar patrones avanzados como distribuci√≥n de tipos o inferencia condicional."
        ],
        en: [
          "When you need to define dynamic types that depend on other conditions.",
          "When you want to create reusable type utilities that work with multiple types.",
          "When working with generic types and need to adapt the resulting type based on certain conditions.",
          "When you need to implement advanced patterns like type distribution or conditional inference."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπCaracter√≠sticas de los Tipos Condicionales",
        en: "üîπFeatures of Conditional Types"
      },
      headers: {
        es: ["Caracter√≠stica", "Descripci√≥n", "Ejemplo"],
        en: ["Feature", "Description", "Example"]
      },
      rows: [
        {
          es: ["Sintaxis b√°sica", "Define tipos basados en condiciones", "`T extends U ? X : Y`"],
          en: ["Basic syntax", "Defines types based on conditions", "`T extends U ? X : Y`"]
        },
        {
          es: ["Distribuci√≥n", "Aplica condiciones a cada miembro de un tipo uni√≥n", "`type NonNullable<T> = T extends null | undefined ? never : T;`"],
          en: ["Distribution", "Applies conditions to each member of a union type", "`type NonNullable<T> = T extends null | undefined ? never : T;`"]
        },
        {
          es: ["Inferencia condicional", "Extrae informaci√≥n de tipos dentro de una condici√≥n", "`type ElementType<T> = T extends (infer U)[] ? U : T;`"],
          en: ["Conditional inference", "Extracts type information within a condition", "`type ElementType<T> = T extends (infer U)[] ? U : T;`"]
        },
        {
          es: ["Utilidades est√°ndar", "Usa tipos condicionales predefinidos", "`Exclude<T, U>`, `Extract<T, U>`"],
          en: ["Standard utilities", "Uses predefined conditional types", "`Exclude<T, U>`, `Extract<T, U>`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Tipo Condicional B√°sico",
        en: "1Ô∏è‚É£ Practical example of Basic Conditional Type"
      },
      caseTitle: {
        es: "Definir un Tipo Basado en una Condici√≥n",
        en: "Define a Type Based on a Condition"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo definir un tipo condicional b√°sico que verifica si un tipo es una cadena.",
        en: "This example demonstrates how to define a basic conditional type that checks if a type is a string."
      },
      code: `type IsString<T> = T extends string ? true : false;

type Result1 = IsString<string>; // true
type Result2 = IsString<number>; // false

console.log(Result1); // true
console.log(Result2); // false`,
      conclusion: {
        es: "üî• Beneficio: Los tipos condicionales permiten definir tipos din√°micos que dependen de condiciones espec√≠ficas.",
        en: "üî• Benefit: Conditional types allow defining dynamic types that depend on specific conditions."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Distribuci√≥n de Tipos",
        en: "2Ô∏è‚É£ Practical example of Type Distribution"
      },
      caseTitle: {
        es: "Filtrar Tipos Usando Distribuci√≥n",
        en: "Filter Types Using Distribution"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar la distribuci√≥n de tipos para filtrar miembros de un tipo uni√≥n.",
        en: "This example demonstrates how to use type distribution to filter members of a union type."
      },
      code: `type NonNullable<T> = T extends null | undefined ? never : T;

type Example = NonNullable<string | number | null | undefined>; // string | number

console.log(Example); // string | number`,
      conclusion: {
        es: "üî• Beneficio: La distribuci√≥n de tipos permite aplicar condiciones a cada miembro de un tipo uni√≥n, facilitando la creaci√≥n de tipos m√°s espec√≠ficos.",
        en: "üî• Benefit: Type distribution allows applying conditions to each member of a union type, making it easier to create more specific types."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Inferencia Condicional",
        en: "3Ô∏è‚É£ Practical example of Conditional Inference"
      },
      caseTitle: {
        es: "Extraer Informaci√≥n de Tipos",
        en: "Extract Type Information"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar la inferencia condicional para extraer el tipo de elementos en un array.",
        en: "This example demonstrates how to use conditional inference to extract the type of elements in an array."
      },
      code: `type ElementType<T> = T extends (infer U)[] ? U : T;

type ArrayType = ElementType<string[]>; // string
type NonArrayType = ElementType<number>; // number

console.log(ArrayType); // string
console.log(NonArrayType); // number`,
      conclusion: {
        es: "üî• Beneficio: La inferencia condicional permite extraer informaci√≥n √∫til de tipos complejos, mejorando la flexibilidad y reutilizaci√≥n del c√≥digo.",
        en: "üî• Benefit: Conditional inference allows extracting useful information from complex types, improving code flexibility and reuse."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Tipos Condicionales?",
        en: "üìå When NOT to use Conditional Types?"
      },
      content: {
        es: [
          "‚ùå Si el proyecto es demasiado peque√±o y no requiere tipos din√°micos o avanzados.",
          "‚ùå Si prefieres evitar la complejidad innecesaria al usar tipos condicionales en casos triviales.",
          "‚ùå Si el uso excesivo de tipos condicionales complica la lectura y mantenibilidad del c√≥digo."
        ],
        en: [
          "‚ùå If the project is too small and does not require dynamic or advanced types.",
          "‚ùå If you prefer to avoid unnecessary complexity when using conditional types in trivial cases.",
          "‚ùå If excessive use of conditional types complicates code readability and maintainability."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los tipos condicionales son ideales para definir tipos din√°micos y flexibles que dependen de condiciones espec√≠ficas.",
      "‚úÖ Permiten implementar patrones avanzados como distribuci√≥n de tipos e inferencia condicional.",
      "‚úÖ No deben usarse de manera excesiva si complican la lectura o mantenibilidad del c√≥digo."
    ],
    en: [
      "‚úÖ Conditional types are ideal for defining dynamic and flexible types that depend on specific conditions.",
      "‚úÖ They allow implementing advanced patterns like type distribution and conditional inference.",
      "‚úÖ They should not be used excessively if they complicate code readability or maintainability."
    ]
  }
};

export default concept;