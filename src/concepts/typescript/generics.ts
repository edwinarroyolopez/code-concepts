import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Generics en TypeScript",
    en: "Generics in TypeScript"
  },
  slug: "generics",
  description: {
    es: "Los generics en TypeScript permiten escribir c√≥digo reutilizable y flexible que puede trabajar con una variedad de tipos sin sacrificar la seguridad de tipos. Son especialmente √∫tiles para funciones, clases e interfaces gen√©ricas.",
    en: "Generics in TypeScript allow writing reusable and flexible code that can work with a variety of types without sacrificing type safety. They are especially useful for generic functions, classes, and interfaces."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los Generics?",
        en: "üîπWhat are Generics?"
      },
      code: `// Funci√≥n gen√©rica
function identity<T>(arg: T): T {
  return arg;
}

// Clase gen√©rica
class Box<T> {
  value: T;

  constructor(value: T) {
    this.value = value;
  }

  getValue(): T {
    return this.value;
  }
}`,
      content: {
        es: "Los **generics** en TypeScript permiten crear componentes (funciones, clases o interfaces) que pueden trabajar con cualquier tipo de dato mientras mantienen la seguridad de tipos. Esto significa que puedes escribir c√≥digo que sea flexible y reutilizable sin perder la capacidad de detectar errores de tipo durante el desarrollo.",
        en: "Generics in TypeScript allow creating components (functions, classes, or interfaces) that can work with any data type while maintaining type safety. This means you can write code that is flexible and reusable without losing the ability to catch type errors during development."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Generics?",
        en: "üîπWhen to use Generics?"
      },
      content: {
        es: [
          "Cuando necesitas escribir funciones o clases que funcionen con m√∫ltiples tipos de datos.",
          "Cuando deseas mantener la seguridad de tipos sin duplicar c√≥digo para cada tipo espec√≠fico.",
          "Cuando trabajas con estructuras de datos gen√©ricas como listas, colas o pilas.",
          "Cuando necesitas definir interfaces o clases que sean flexibles pero seguras en t√©rminos de tipos."
        ],
        en: [
          "When you need to write functions or classes that work with multiple data types.",
          "When you want to maintain type safety without duplicating code for each specific type.",
          "When working with generic data structures like lists, queues, or stacks.",
          "When you need to define interfaces or classes that are flexible but safe in terms of types."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπCaracter√≠sticas de los Generics",
        en: "üîπFeatures of Generics"
      },
      headers: {
        es: ["Caracter√≠stica", "Descripci√≥n", "Ejemplo"],
        en: ["Feature", "Description", "Example"]
      },
      rows: [
        {
          es: ["Funciones gen√©ricas", "Funciones que aceptan cualquier tipo", "`function identity<T>(arg: T): T { ... }`"],
          en: ["Generic functions", "Functions that accept any type", "`function identity<T>(arg: T): T { ... }`"]
        },
        {
          es: ["Clases gen√©ricas", "Clases que trabajan con tipos espec√≠ficos", "`class Box<T> { value: T; ... }`"],
          en: ["Generic classes", "Classes that work with specific types", "`class Box<T> { value: T; ... }`"]
        },
        {
          es: ["Restricciones", "Limitar los tipos permitidos", "`function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] { ... }`"],
          en: ["Constraints", "Limit allowed types", "`function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] { ... }`"]
        },
        {
          es: ["Utilidades de tipo", "Manipular tipos gen√©ricos", "`type Partial<T> = { [P in keyof T]?: T[P]; };`"],
          en: ["Type utilities", "Manipulate generic types", "`type Partial<T> = { [P in keyof T]?: T[P]; };`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Funci√≥n Gen√©rica",
        en: "1Ô∏è‚É£ Practical example of Generic Function"
      },
      caseTitle: {
        es: "Crear una Funci√≥n Gen√©rica",
        en: "Create a Generic Function"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo crear una funci√≥n gen√©rica que acepte cualquier tipo de dato.",
        en: "This example demonstrates how to create a generic function that accepts any data type."
      },
      code: `function identity<T>(arg: T): T {
  return arg;
}

const numberResult = identity<number>(42);
console.log(numberResult); // 42

const stringResult = identity<string>('Hello');
console.log(stringResult); // Hello`,
      conclusion: {
        es: "üî• Beneficio: Las funciones gen√©ricas permiten escribir c√≥digo reutilizable que funciona con cualquier tipo de dato mientras mantiene la seguridad de tipos.",
        en: "üî• Benefit: Generic functions allow writing reusable code that works with any data type while maintaining type safety."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Clase Gen√©rica",
        en: "2Ô∏è‚É£ Practical example of Generic Class"
      },
      caseTitle: {
        es: "Crear una Clase Gen√©rica",
        en: "Create a Generic Class"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo crear una clase gen√©rica que pueda almacenar y recuperar valores de cualquier tipo.",
        en: "This example demonstrates how to create a generic class that can store and retrieve values of any type."
      },
      code: `class Box<T> {
  private value: T;

  constructor(value: T) {
    this.value = value;
  }

  getValue(): T {
    return this.value;
  }
}

const numberBox = new Box<number>(42);
console.log(numberBox.getValue()); // 42

const stringBox = new Box<string>('Hello');
console.log(stringBox.getValue()); // Hello`,
      conclusion: {
        es: "üî• Beneficio: Las clases gen√©ricas permiten crear estructuras de datos flexibles que pueden trabajar con cualquier tipo de dato.",
        en: "üî• Benefit: Generic classes allow creating flexible data structures that can work with any data type."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Restricciones en Generics",
        en: "3Ô∏è‚É£ Practical example of Constraints in Generics"
      },
      caseTitle: {
        es: "Usar Restricciones para Limitar Tipos",
        en: "Use Constraints to Limit Types"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar restricciones para limitar los tipos permitidos en un generic.",
        en: "This example demonstrates how to use constraints to limit the allowed types in a generic."
      },
      code: `interface Lengthwise {
  length: number;
}

function getLength<T extends Lengthwise>(item: T): number {
  return item.length;
}

console.log(getLength('Hello')); // 5
// console.log(getLength(42)); // Error: Argument of type 'number' is not assignable to parameter of type 'Lengthwise'.`,
      conclusion: {
        es: "üî• Beneficio: Las restricciones permiten asegurar que los generics solo acepten tipos que cumplan con ciertas condiciones, mejorando la seguridad del c√≥digo.",
        en: "üî• Benefit: Constraints ensure that generics only accept types that meet certain conditions, improving code safety."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Generics?",
        en: "üìå When NOT to use Generics?"
      },
      content: {
        es: [
          "‚ùå Si el proyecto es demasiado peque√±o y no requiere reutilizaci√≥n de c√≥digo.",
          "‚ùå Si prefieres evitar la complejidad innecesaria al usar generics en casos triviales.",
          "‚ùå Si el uso excesivo de generics complica la lectura y mantenibilidad del c√≥digo."
        ],
        en: [
          "‚ùå If the project is too small and does not require code reuse.",
          "‚ùå If you prefer to avoid unnecessary complexity when using generics in trivial cases.",
          "‚ùå If excessive use of generics complicates code readability and maintainability."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los generics son ideales para escribir c√≥digo reutilizable y flexible que funcione con m√∫ltiples tipos de datos.",
      "‚úÖ Permiten mantener la seguridad de tipos sin duplicar c√≥digo para cada tipo espec√≠fico.",
      "‚úÖ No deben usarse de manera excesiva si complican la lectura o mantenibilidad del c√≥digo."
    ],
    en: [
      "‚úÖ Generics are ideal for writing reusable and flexible code that works with multiple data types.",
      "‚úÖ They allow maintaining type safety without duplicating code for each specific type.",
      "‚úÖ They should not be used excessively if they complicate code readability or maintainability."
    ]
  }
};

export default concept;