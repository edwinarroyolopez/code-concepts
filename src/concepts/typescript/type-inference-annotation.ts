import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Inferencia y Anotaci√≥n de Tipos en TypeScript",
    en: "Type Inference and Type Annotation in TypeScript"
  },
  slug: "type-inference-annotation",
  description: {
    es: "La inferencia de tipos permite que TypeScript deduzca autom√°ticamente el tipo de una variable, mientras que la anotaci√≥n de tipos implica declarar expl√≠citamente el tipo. Ambas t√©cnicas son fundamentales para garantizar la seguridad de tipos en TypeScript.",
    en: "Type inference allows TypeScript to automatically deduce the type of a variable, while type annotation involves explicitly declaring the type. Both techniques are fundamental for ensuring type safety in TypeScript."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son la Inferencia y Anotaci√≥n de Tipos?",
        en: "üîπWhat are Type Inference and Type Annotation?"
      },
      code: `// Inferencia de tipos
let age = 25; // TypeScript infiere que 'age' es de tipo number

// Anotaci√≥n de tipos
let name: string = 'Alice'; // Se declara expl√≠citamente que 'name' es de tipo string`,
      content: {
        es: "La **inferencia de tipos** es una caracter√≠stica de TypeScript que permite deducir autom√°ticamente el tipo de una variable bas√°ndose en su valor inicial. Por otro lado, la **anotaci√≥n de tipos** consiste en declarar expl√≠citamente el tipo de una variable. Ambas t√©cnicas son √∫tiles para garantizar la seguridad de tipos y mejorar la legibilidad del c√≥digo.",
        en: "Type **inference** is a feature of TypeScript that automatically deduces the type of a variable based on its initial value. On the other hand, **type annotation** involves explicitly declaring the type of a variable. Both techniques are useful for ensuring type safety and improving code readability."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Inferencia o Anotaci√≥n de Tipos?",
        en: "üîπWhen to use Type Inference or Type Annotation?"
      },
      content: {
        es: [
          "Usa **inferencia de tipos** cuando el tipo de una variable es obvio a partir de su valor inicial.",
          "Usa **anotaci√≥n de tipos** cuando necesitas claridad adicional o cuando el tipo no puede ser inferido autom√°ticamente.",
          "Usa **anotaci√≥n de tipos** en funciones para especificar los tipos de par√°metros y valores de retorno.",
          "Usa **inferencia de tipos** para reducir la verbosidad en c√≥digo simple y directo."
        ],
        en: [
          "Use **type inference** when the type of a variable is obvious from its initial value.",
          "Use **type annotation** when additional clarity is needed or when the type cannot be inferred automatically.",
          "Use **type annotation** in functions to specify parameter types and return values.",
          "Use **type inference** to reduce verbosity in simple and straightforward code."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre Inferencia y Anotaci√≥n de Tipos",
        en: "üîπComparison between Type Inference and Type Annotation"
      },
      headers: {
        es: ["Caracter√≠stica", "Inferencia de Tipos", "Anotaci√≥n de Tipos"],
        en: ["Feature", "Type Inference", "Type Annotation"]
      },
      rows: [
        {
          es: ["Sintaxis", "Autom√°tica (sin declaraci√≥n expl√≠cita)", "Expl√≠cita (`let x: type`)" ],
          en: ["Syntax", "Automatic (no explicit declaration)", "Explicit (`let x: type`)"]
        },
        {
          es: ["Legibilidad", "‚úÖ Menos verbosa", "‚ùå M√°s verbosa"],
          en: ["Readability", "‚úÖ Less verbose", "‚ùå More verbose"]
        },
        {
          es: ["Uso com√∫n", "C√≥digo simple y directo", "Funciones, interfaces o casos complejos"],
          en: ["Common use", "Simple and straightforward code", "Functions, interfaces, or complex cases"]
        },
        {
          es: ["Seguridad de tipos", "‚úÖ Garantizada", "‚úÖ Garantizada"],
          en: ["Type safety", "‚úÖ Ensured", "‚úÖ Ensured"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Inferencia de Tipos",
        en: "1Ô∏è‚É£ Practical example of Type Inference"
      },
      caseTitle: {
        es: "Declaraci√≥n de Variables con Inferencia de Tipos",
        en: "Declaring Variables with Type Inference"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo TypeScript infiere autom√°ticamente el tipo de una variable bas√°ndose en su valor inicial.",
        en: "This example demonstrates how TypeScript automatically infers the type of a variable based on its initial value."
      },
      code: `let age = 25; // TypeScript infiere que 'age' es de tipo number
let name = 'Alice'; // TypeScript infiere que 'name' es de tipo string
let isActive = true; // TypeScript infiere que 'isActive' es de tipo boolean

console.log(age, name, isActive); // 25 Alice true`,
      conclusion: {
        es: "üî• Beneficio: La inferencia de tipos reduce la verbosidad del c√≥digo sin comprometer la seguridad de tipos.",
        en: "üî• Benefit: Type inference reduces code verbosity without compromising type safety."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Anotaci√≥n de Tipos",
        en: "2Ô∏è‚É£ Practical example of Type Annotation"
      },
      caseTitle: {
        es: "Declaraci√≥n de Variables con Anotaci√≥n de Tipos",
        en: "Declaring Variables with Type Annotation"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo declarar expl√≠citamente el tipo de una variable usando anotaciones de tipos.",
        en: "This example demonstrates how to explicitly declare the type of a variable using type annotations."
      },
      code: `let age: number = 30;
let name: string = 'John Doe';
let isActive: boolean = false;

console.log(age, name, isActive); // 30 John Doe false`,
      conclusion: {
        es: "üî• Beneficio: La anotaci√≥n de tipos mejora la claridad del c√≥digo, especialmente en casos complejos o cuando el tipo no es obvio.",
        en: "üî• Benefit: Type annotation improves code clarity, especially in complex cases or when the type is not obvious."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Anotaci√≥n de Tipos en Funciones",
        en: "3Ô∏è‚É£ Practical example of Type Annotation in Functions"
      },
      caseTitle: {
        es: "Especificar Tipos en Par√°metros y Valores de Retorno",
        en: "Specifying Types in Parameters and Return Values"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar anotaciones de tipos en funciones para especificar los tipos de par√°metros y valores de retorno.",
        en: "This example demonstrates how to use type annotations in functions to specify parameter types and return values."
      },
      code: `function add(a: number, b: number): number {
  return a + b;
}

const result = add(5, 10);
console.log(result); // 15`,
      conclusion: {
        es: "üî• Beneficio: La anotaci√≥n de tipos en funciones mejora la legibilidad y previene errores de tipo en tiempo de desarrollo.",
        en: "üî• Benefit: Type annotation in functions improves readability and prevents type errors during development."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Inferencia o Anotaci√≥n de Tipos?",
        en: "üìå When NOT to use Type Inference or Type Annotation?"
      },
      content: {
        es: [
          "‚ùå Si la inferencia de tipos no es suficiente para casos complejos donde el tipo debe ser expl√≠cito.",
          "‚ùå Si prefieres evitar la verbosidad innecesaria al usar anotaciones de tipos en c√≥digo simple.",
          "‚ùå Si el uso excesivo de anotaciones de tipos dificulta la lectura del c√≥digo."
        ],
        en: [
          "‚ùå If type inference is insufficient for complex cases where the type must be explicit.",
          "‚ùå If you prefer to avoid unnecessary verbosity when using type annotations in simple code.",
          "‚ùå If excessive use of type annotations makes the code harder to read."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ La inferencia de tipos es ideal para c√≥digo simple y directo, reduciendo la verbosidad.",
      "‚úÖ La anotaci√≥n de tipos es √∫til para mejorar la claridad en funciones, interfaces o casos complejos.",
      "‚úÖ No deben usarse de manera exclusiva; ambas t√©cnicas complementan la seguridad y legibilidad del c√≥digo."
    ],
    en: [
      "‚úÖ Type inference is ideal for simple and straightforward code, reducing verbosity.",
      "‚úÖ Type annotation is useful for improving clarity in functions, interfaces, or complex cases.",
      "‚úÖ They should not be used exclusively; both techniques complement code safety and readability."
    ]
  }
};

export default concept;