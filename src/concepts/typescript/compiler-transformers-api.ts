import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Transformadores del Compilador y API en TypeScript",
    en: "Compiler Transformers and API in TypeScript"
  },
  slug: "compiler-transformers-api",
  description: {
    es: "Los transformadores del compilador en TypeScript permiten modificar el AST (Abstract Syntax Tree) generado durante la fase de transpilación. La API del compilador facilita la creación de herramientas personalizadas, optimizaciones o extensiones del compilador.",
    en: "Compiler transformers in TypeScript allow modifying the AST (Abstract Syntax Tree) generated during the transpilation phase. The compiler API facilitates the creation of custom tools, optimizations, or compiler extensions."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "🔹¿Qué son los Transformadores del Compilador y la API?",
        en: "🔹What are Compiler Transformers and the API?"
      },
      code: `// Ejemplo básico de un transformador del compilador
import * as ts from 'typescript';

function logTransformer<T extends ts.Node>(context: ts.TransformationContext) {
  return (rootNode: T) => {
    function visit(node: ts.Node): ts.Node {
      console.log(\`Visiting node: \${ts.SyntaxKind[node.kind]}\`);
      return ts.visitEachChild(node, visit, context);
    }
    return ts.visitNode(rootNode, visit);
  };
}

// Uso del transformador con la API del compilador
const sourceCode = \`const x = 10;\`;
const sourceFile = ts.createSourceFile('example.ts', sourceCode, ts.ScriptTarget.Latest);

const result = ts.transform(sourceFile, [logTransformer]);
console.log(result.transformed[0].getText());`,
      content: {
        es: "Los **transformadores del compilador** en TypeScript son funciones que modifican el AST (Abstract Syntax Tree) generado durante la fase de transpilación. Estos transformadores son útiles para realizar tareas como optimización de código, generación automática de código o análisis estático. La **API del compilador** de TypeScript proporciona herramientas para interactuar directamente con el compilador, lo que permite crear transformadores personalizados, analizar archivos fuente y generar código modificado. Esta funcionalidad es especialmente valiosa para desarrollar herramientas avanzadas, como linters, bundlers o frameworks.",
        en: "Compiler transformers in TypeScript are functions that modify the AST (Abstract Syntax Tree) generated during the transpilation phase. These transformers are useful for tasks such as code optimization, automatic code generation, or static analysis. The TypeScript **compiler API** provides tools to interact directly with the compiler, enabling the creation of custom transformers, source file analysis, and modified code generation. This functionality is especially valuable for developing advanced tools, such as linters, bundlers, or frameworks."
      }
    },
    {
      type: "list",
      title: {
        es: "🔹¿Cuándo usar Transformadores del Compilador y la API?",
        en: "🔹When to use Compiler Transformers and the API?"
      },
      content: {
        es: [
          "Cuando necesitas optimizar el código generado por el compilador de TypeScript.",
          "Cuando deseas generar automáticamente código basado en ciertas reglas o patrones.",
          "Cuando trabajas en herramientas avanzadas como linters, bundlers o frameworks.",
          "Cuando necesitas analizar o transformar archivos fuente de TypeScript de manera programática."
        ],
        en: [
          "When you need to optimize the code generated by the TypeScript compiler.",
          "When you want to automatically generate code based on certain rules or patterns.",
          "When working on advanced tools such as linters, bundlers, or frameworks.",
          "When you need to analyze or transform TypeScript source files programmatically."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "🔹Características de los Transformadores del Compilador y la API",
        en: "🔹Features of Compiler Transformers and the API"
      },
      headers: {
        es: ["Característica", "Descripción", "Ejemplo"],
        en: ["Feature", "Description", "Example"]
      },
      rows: [
        {
          es: ["Transformadores", "Funciones que modifican el AST", "`ts.transform(sourceFile, [transformer])`"],
          en: ["Transformers", "Functions that modify the AST", "`ts.transform(sourceFile, [transformer])`"]
        },
        {
          es: ["API del compilador", "Interactúa directamente con el compilador", "`ts.createSourceFile(...)`"],
          en: ["Compiler API", "Interacts directly with the compiler", "`ts.createSourceFile(...)`"]
        },
        {
          es: ["Análisis estático", "Analiza el código fuente sin ejecutarlo", "`ts.SyntaxKind[node.kind]`"],
          en: ["Static analysis", "Analyzes source code without executing it", "`ts.SyntaxKind[node.kind]`"]
        },
        {
          es: ["Generación de código", "Crea nuevo código basado en el AST", "`ts.createPrinter().printNode(...)`"],
          en: ["Code generation", "Creates new code based on the AST", "`ts.createPrinter().printNode(...)`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1️⃣ Ejemplo práctico de Transformador Básico",
        en: "1️⃣ Practical example of Basic Transformer"
      },
      caseTitle: {
        es: "Crear un Transformador que Registre Nodos del AST",
        en: "Create a Transformer that Logs AST Nodes"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo crear un transformador básico que registre los nodos del AST mientras visita cada uno de ellos.",
        en: "This example demonstrates how to create a basic transformer that logs AST nodes while visiting each one."
      },
      code: `import * as ts from 'typescript';

function logTransformer<T extends ts.Node>(context: ts.TransformationContext) {
  return (rootNode: T) => {
    function visit(node: ts.Node): ts.Node {
      console.log(\`Visiting node: \${ts.SyntaxKind[node.kind]}\`);
      return ts.visitEachChild(node, visit, context);
    }
    return ts.visitNode(rootNode, visit);
  };
}

const sourceCode = \`const x = 10;\`;
const sourceFile = ts.createSourceFile('example.ts', sourceCode, ts.ScriptTarget.Latest);

const result = ts.transform(sourceFile, [logTransformer]);
console.log(result.transformed[0].getText()); // const x = 10;`,
      conclusion: {
        es: "🔥 Beneficio: Los transformadores permiten analizar y modificar el AST, facilitando la creación de herramientas personalizadas.",
        en: "🔥 Benefit: Transformers allow analyzing and modifying the AST, facilitating the creation of custom tools."
      }
    },
    {
      type: "example",
      title: {
        es: "2️⃣ Ejemplo práctico de Generación de Código",
        en: "2️⃣ Practical example of Code Generation"
      },
      caseTitle: {
        es: "Generar Código Usando la API del Compilador",
        en: "Generate Code Using the Compiler API"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo usar la API del compilador para generar código TypeScript programáticamente.",
        en: "This example demonstrates how to use the compiler API to generate TypeScript code programmatically."
      },
      code: `import * as ts from 'typescript';

// Crear una declaración de variable
const variableDeclaration = ts.factory.createVariableStatement(
  undefined,
  ts.factory.createVariableDeclarationList(
    [
      ts.factory.createVariableDeclaration(
        ts.factory.createIdentifier('x'),
        undefined,
        undefined,
        ts.factory.createNumericLiteral(42)
      )
    ],
    ts.NodeFlags.Const
  )
);

// Imprimir el código generado
const printer = ts.createPrinter();
const generatedCode = printer.printNode(ts.EmitHint.Unspecified, variableDeclaration, undefined);
console.log(generatedCode); // const x = 42;`,
      conclusion: {
        es: "🔥 Beneficio: La API del compilador permite generar código de manera programática, lo que es útil para herramientas avanzadas.",
        en: "🔥 Benefit: The compiler API allows generating code programmatically, which is useful for advanced tools."
      }
    },
    {
      type: "example",
      title: {
        es: "3️⃣ Ejemplo práctico de Análisis Estático",
        en: "3️⃣ Practical example of Static Analysis"
      },
      caseTitle: {
        es: "Analizar el Tipo de una Variable Usando la API del Compilador",
        en: "Analyze the Type of a Variable Using the Compiler API"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo usar la API del compilador para analizar el tipo de una variable en un archivo fuente.",
        en: "This example demonstrates how to use the compiler API to analyze the type of a variable in a source file."
      },
      code: `import * as ts from 'typescript';

const sourceCode = \`const x: number = 42;\`;
const sourceFile = ts.createSourceFile('example.ts', sourceCode, ts.ScriptTarget.Latest);

function analyzeVariableType(sourceFile: ts.SourceFile) {
  ts.forEachChild(sourceFile, (node) => {
    if (ts.isVariableStatement(node)) {
      const declaration = node.declarationList.declarations[0];
      if (declaration.type) {
        console.log(\`Type of variable: \${declaration.type.getText(sourceFile)}\`);
      }
    }
  });
}

analyzeVariableType(sourceFile); // Type of variable: number`,
      conclusion: {
        es: "🔥 Beneficio: La API del compilador permite realizar análisis estáticos sobre el código fuente, facilitando la creación de herramientas de análisis.",
        en: "🔥 Benefit: The compiler API allows performing static analysis on source code, facilitating the creation of analysis tools."
      }
    },
    {
      type: "list",
      title: {
        es: "📌 ¿Cuándo NO usar Transformadores del Compilador y la API?",
        en: "📌 When NOT to use Compiler Transformers and the API?"
      },
      content: {
        es: [
          "❌ Si el proyecto es demasiado pequeño y no requiere herramientas avanzadas o transformaciones del compilador.",
          "❌ Si prefieres evitar la complejidad innecesaria al usar transformadores en casos triviales.",
          "❌ Si el uso excesivo de transformadores complica la lectura y mantenibilidad del código."
        ],
        en: [
          "❌ If the project is too small and does not require advanced tools or compiler transformations.",
          "❌ If you prefer to avoid unnecessary complexity when using transformers in trivial cases.",
          "❌ If excessive use of transformers complicates code readability and maintainability."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "✅ Los transformadores del compilador y la API son ideales para optimizar, generar o analizar código de manera programática.",
      "✅ Permiten crear herramientas avanzadas como linters, bundlers o frameworks.",
      "✅ No deben usarse si generan complejidad innecesaria o dificultan la comprensión del código."
    ],
    en: [
      "✅ Compiler transformers and the API are ideal for optimizing, generating, or analyzing code programmatically.",
      "✅ They allow creating advanced tools such as linters, bundlers, or frameworks.",
      "✅ They should not be used if they generate unnecessary complexity or make the code harder to understand."
    ]
  }
};

export default concept;