import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Type Guards y Refinamiento de Tipos en TypeScript",
    en: "Type Guards and Type Narrowing in TypeScript"
  },
  slug: "type-guards-narrowing",
  description: {
    es: "Los type guards y el refinamiento de tipos en TypeScript permiten verificar el tipo de una variable en tiempo de ejecuci√≥n y reducir el conjunto de posibles tipos. Esto mejora la seguridad del c√≥digo al trabajar con uniones de tipos o valores din√°micos.",
    en: "Type guards and type narrowing in TypeScript allow checking the type of a variable at runtime and reducing the set of possible types. This improves code safety when working with type unions or dynamic values."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los Type Guards y Refinamiento de Tipos?",
        en: "üîπWhat are Type Guards and Type Narrowing?"
      },
      code: `// Type guard usando typeof
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

// Refinamiento de tipos usando instanceof
function processInput(input: string | number): void {
  if (typeof input === 'string') {
    console.log('Input is a string:', input.toUpperCase());
  } else {
    console.log('Input is a number:', input.toFixed(2));
  }
}`,
      content: {
        es: "Un **type guard** en TypeScript es una expresi√≥n que realiza una verificaci√≥n de tipo en tiempo de ejecuci√≥n, permitiendo asegurar que una variable pertenece a un tipo espec√≠fico. El **refinamiento de tipos** es el proceso mediante el cual TypeScript reduce el conjunto de posibles tipos de una variable bas√°ndose en condiciones espec√≠ficas, como `typeof`, `instanceof` o comparaciones personalizadas. Estas herramientas son fundamentales para trabajar con uniones de tipos y valores din√°micos, garantizando que el c√≥digo sea seguro y predecible.",
        en: "A **type guard** in TypeScript is an expression that performs a type check at runtime, allowing you to ensure that a variable belongs to a specific type. **Type narrowing** is the process by which TypeScript reduces the set of possible types for a variable based on specific conditions, such as `typeof`, `instanceof`, or custom comparisons. These tools are essential for working with type unions and dynamic values, ensuring that the code is safe and predictable."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Type Guards y Refinamiento de Tipos?",
        en: "üîπWhen to use Type Guards and Type Narrowing?"
      },
      content: {
        es: [
          "Cuando trabajas con uniones de tipos (`string | number`) y necesitas determinar el tipo exacto en tiempo de ejecuci√≥n.",
          "Cuando manejas valores din√°micos, como datos provenientes de APIs o entradas de usuario.",
          "Cuando deseas mejorar la seguridad del c√≥digo al evitar errores relacionados con tipos incorrectos.",
          "Cuando necesitas implementar l√≥gica espec√≠fica basada en el tipo de una variable."
        ],
        en: [
          "When working with type unions (`string | number`) and need to determine the exact type at runtime.",
          "When handling dynamic values, such as data from APIs or user inputs.",
          "When you want to improve code safety by avoiding errors related to incorrect types.",
          "When you need to implement logic specific to the type of a variable."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπTipos de Type Guards Comunes",
        en: "üîπCommon Type Guards"
      },
      headers: {
        es: ["Tipo", "Descripci√≥n", "Ejemplo"],
        en: ["Type", "Description", "Example"]
      },
      rows: [
        {
          es: ["typeof", "Verifica tipos primitivos", "`typeof value === 'string'`"],
          en: ["typeof", "Checks primitive types", "`typeof value === 'string'`"]
        },
        {
          es: ["instanceof", "Verifica instancias de clases", "`value instanceof Date`"],
          en: ["instanceof", "Checks class instances", "`value instanceof Date`"]
        },
        {
          es: ["Predicados personalizados", "Funciones que devuelven un type guard", "`function isString(value: any): value is string`"],
          en: ["Custom predicates", "Functions that return a type guard", "`function isString(value: any): value is string`"]
        },
        {
          es: ["Comparaciones literales", "Verifica valores espec√≠ficos", "`if (value === 'active')`"],
          en: ["Literal comparisons", "Checks specific values", "`if (value === 'active')`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de typeof",
        en: "1Ô∏è‚É£ Practical example of typeof"
      },
      caseTitle: {
        es: "Verificar el Tipo de una Variable Usando typeof",
        en: "Check the Type of a Variable Using typeof"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar `typeof` para verificar si una variable es de tipo `string` o `number`.",
        en: "This example demonstrates how to use `typeof` to check if a variable is of type `string` or `number`."
      },
      code: `function processInput(input: string | number): void {
  if (typeof input === 'string') {
    console.log('Input is a string:', input.toUpperCase());
  } else {
    console.log('Input is a number:', input.toFixed(2));
  }
}

processInput('hello'); // Input is a string: HELLO
processInput(42); // Input is a number: 42.00`,
      conclusion: {
        es: "üî• Beneficio: `typeof` es una forma simple y efectiva de verificar tipos primitivos en tiempo de ejecuci√≥n.",
        en: "üî• Benefit: `typeof` is a simple and effective way to check primitive types at runtime."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de instanceof",
        en: "2Ô∏è‚É£ Practical example of instanceof"
      },
      caseTitle: {
        es: "Verificar el Tipo de una Instancia Usando instanceof",
        en: "Check the Type of an Instance Using instanceof"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar `instanceof` para verificar si una variable es una instancia de una clase espec√≠fica.",
        en: "This example demonstrates how to use `instanceof` to check if a variable is an instance of a specific class."
      },
      code: `class Car {
  drive(): void {
    console.log('Driving a car');
  }
}

class Bike {
  ride(): void {
    console.log('Riding a bike');
  }
}

function operateVehicle(vehicle: Car | Bike): void {
  if (vehicle instanceof Car) {
    vehicle.drive();
  } else {
    vehicle.ride();
  }
}

operateVehicle(new Car()); // Driving a car
operateVehicle(new Bike()); // Riding a bike`,
      conclusion: {
        es: "üî• Beneficio: `instanceof` es ideal para verificar instancias de clases y acceder a m√©todos espec√≠ficos de cada clase.",
        en: "üî• Benefit: `instanceof` is ideal for checking class instances and accessing specific methods of each class."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Predicados Personalizados",
        en: "3Ô∏è‚É£ Practical example of Custom Predicates"
      },
      caseTitle: {
        es: "Crear un Type Guard Personalizado",
        en: "Create a Custom Type Guard"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo crear un type guard personalizado para verificar si una variable es de tipo `string`.",
        en: "This example demonstrates how to create a custom type guard to check if a variable is of type `string`."
      },
      code: `function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function processValue(value: unknown): void {
  if (isString(value)) {
    console.log('Value is a string:', value.toUpperCase());
  } else {
    console.log('Value is not a string');
  }
}

processValue('hello'); // Value is a string: HELLO
processValue(42); // Value is not a string`,
      conclusion: {
        es: "üî• Beneficio: Los predicados personalizados permiten definir type guards reutilizables para tipos complejos.",
        en: "üî• Benefit: Custom predicates allow defining reusable type guards for complex types."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Type Guards y Refinamiento de Tipos?",
        en: "üìå When NOT to use Type Guards and Type Narrowing?"
      },
      content: {
        es: [
          "‚ùå Si el proyecto es demasiado peque√±o y no requiere manejo avanzado de tipos.",
          "‚ùå Si prefieres evitar la complejidad innecesaria al usar type guards en casos triviales.",
          "‚ùå Si el uso excesivo de type guards complica la lectura y mantenibilidad del c√≥digo."
        ],
        en: [
          "‚ùå If the project is too small and does not require advanced type handling.",
          "‚ùå If you prefer to avoid unnecessary complexity when using type guards in trivial cases.",
          "‚ùå If excessive use of type guards complicates code readability and maintainability."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los type guards y el refinamiento de tipos son ideales para trabajar con uniones de tipos y valores din√°micos.",
      "‚úÖ Permiten mejorar la seguridad del c√≥digo al verificar tipos en tiempo de ejecuci√≥n.",
      "‚úÖ No deben usarse de manera excesiva si complican la lectura o mantenibilidad del c√≥digo."
    ],
    en: [
      "‚úÖ Type guards and type narrowing are ideal for working with type unions and dynamic values.",
      "‚úÖ They improve code safety by checking types at runtime.",
      "‚úÖ They should not be used excessively if they complicate code readability or maintainability."
    ]
  }
};

export default concept;