import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Generics Avanzados en TypeScript",
    en: "Advanced Generics in TypeScript"
  },
  slug: "advanced-generics",
  description: {
    es: "Los generics avanzados en TypeScript permiten crear tipos y funciones gen√©ricas m√°s flexibles y potentes, utilizando caracter√≠sticas como restricciones, inferencia condicional, mapeo de tipos y utilidades de tipo.",
    en: "Advanced generics in TypeScript allow creating more flexible and powerful generic types and functions by leveraging features such as constraints, conditional inference, type mapping, and type utilities."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los Generics Avanzados?",
        en: "üîπWhat are Advanced Generics?"
      },
      code: `// Ejemplo b√°sico de generics avanzados
type Partial<T> = { [P in keyof T]?: T[P] };

// Restricciones en generics
function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
  return obj[key];
}

// Inferencia condicional en generics
type IsArray<T> = T extends Array<infer U> ? U : never;

// Mapeo de tipos en generics
type Readonly<T> = { readonly [P in keyof T]: T[P] };`,
      content: {
        es: "Los **generics avanzados** en TypeScript ampl√≠an las capacidades de los generics b√°sicos mediante el uso de caracter√≠sticas avanzadas como **restricciones**, **inferencia condicional**, **mapeo de tipos** y **utilidades de tipo**. Estos mecanismos permiten crear tipos y funciones gen√©ricas m√°s flexibles y reutilizables, adapt√°ndose a una amplia variedad de escenarios. Los generics avanzados son especialmente √∫tiles para trabajar con estructuras de datos complejas, transformaciones de tipos y patrones de dise√±o avanzados.",
        en: "Advanced generics in TypeScript extend the capabilities of basic generics by leveraging advanced features such as **constraints**, **conditional inference**, **type mapping**, and **type utilities**. These mechanisms allow creating more flexible and reusable generic types and functions, adapting to a wide range of scenarios. Advanced generics are especially useful for working with complex data structures, type transformations, and advanced design patterns."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Generics Avanzados?",
        en: "üîπWhen to use Advanced Generics?"
      },
      content: {
        es: [
          "Cuando necesitas aplicar restricciones a los tipos gen√©ricos para limitar los valores permitidos.",
          "Cuando deseas utilizar inferencia condicional para extraer informaci√≥n de tipos o crear tipos din√°micos.",
          "Cuando trabajas con mapeo de tipos para transformar propiedades de un tipo existente.",
          "Cuando necesitas implementar utilidades de tipo personalizadas para manipular estructuras de datos complejas."
        ],
        en: [
          "When you need to apply constraints to generic types to limit allowed values.",
          "When you want to use conditional inference to extract type information or create dynamic types.",
          "When working with type mapping to transform properties of an existing type.",
          "When you need to implement custom type utilities to manipulate complex data structures."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπCaracter√≠sticas de los Generics Avanzados",
        en: "üîπFeatures of Advanced Generics"
      },
      headers: {
        es: ["Caracter√≠stica", "Descripci√≥n", "Ejemplo"],
        en: ["Feature", "Description", "Example"]
      },
      rows: [
        {
          es: ["Restricciones", "Limita los tipos permitidos en un generic", "`<T extends string>`"],
          en: ["Constraints", "Limits allowed types in a generic", "`<T extends string>`"]
        },
        {
          es: ["Inferencia condicional", "Extrae informaci√≥n de tipos dentro de una condici√≥n", "`T extends Array<infer U> ? U : never`"],
          en: ["Conditional inference", "Extracts type information within a condition", "`T extends Array<infer U> ? U : never`"]
        },
        {
          es: ["Mapeo de tipos", "Transforma propiedades de un tipo existente", "`{ [P in keyof T]: T[P] }`"],
          en: ["Type mapping", "Transforms properties of an existing type", "`{ [P in keyof T]: T[P] }`"]
        },
        {
          es: ["Utilidades de tipo", "Define funciones gen√©ricas reutilizables", "`type Partial<T> = { [P in keyof T]?: T[P] };`"],
          en: ["Type utilities", "Defines reusable generic functions", "`type Partial<T> = { [P in keyof T]?: T[P] };`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Restricciones",
        en: "1Ô∏è‚É£ Practical example of Constraints"
      },
      caseTitle: {
        es: "Aplicar Restricciones a un Generic",
        en: "Apply Constraints to a Generic"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo aplicar restricciones a un generic para limitar los tipos permitidos.",
        en: "This example demonstrates how to apply constraints to a generic to limit allowed types."
      },
      code: `function getProperty<T, K extends keyof T>(obj: T, key: K): T[K] {
  return obj[key];
}

const user = { id: 1, name: 'Alice' };
const id = getProperty(user, 'id'); // number
const name = getProperty(user, 'name'); // string

console.log(id); // 1
console.log(name); // Alice`,
      conclusion: {
        es: "üî• Beneficio: Las restricciones garantizan que solo se usen claves v√°lidas del objeto, mejorando la seguridad del c√≥digo.",
        en: "üî• Benefit: Constraints ensure that only valid object keys are used, improving code safety."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Inferencia Condicional",
        en: "2Ô∏è‚É£ Practical example of Conditional Inference"
      },
      caseTitle: {
        es: "Extraer Informaci√≥n de Tipos Usando Inferencia Condicional",
        en: "Extract Type Information Using Conditional Inference"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar inferencia condicional para extraer el tipo de elementos en un array.",
        en: "This example demonstrates how to use conditional inference to extract the type of elements in an array."
      },
      code: `type IsArray<T> = T extends Array<infer U> ? U : never;

type StringArrayElement = IsArray<string[]>; // string
type NumberArrayElement = IsArray<number[]>; // number
type NotArray = IsArray<boolean>; // never

console.log(StringArrayElement); // string
console.log(NumberArrayElement); // number
console.log(NotArray); // never`,
      conclusion: {
        es: "üî• Beneficio: La inferencia condicional permite extraer informaci√≥n √∫til de tipos complejos, facilitando la creaci√≥n de tipos din√°micos.",
        en: "üî• Benefit: Conditional inference allows extracting useful information from complex types, facilitating the creation of dynamic types."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Mapeo de Tipos",
        en: "3Ô∏è‚É£ Practical example of Type Mapping"
      },
      caseTitle: {
        es: "Transformar Propiedades de un Tipo Usando Mapeo",
        en: "Transform Properties of a Type Using Mapping"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar mapeo de tipos para hacer todas las propiedades de un tipo de solo lectura.",
        en: "This example demonstrates how to use type mapping to make all properties of a type read-only."
      },
      code: `type Readonly<T> = { readonly [P in keyof T]: T[P] };

interface User {
  id: number;
  name: string;
}

type ReadonlyUser = Readonly<User>;

const user: ReadonlyUser = { id: 1, name: 'Alice' };
// user.id = 2; // Error: Cannot assign to 'id' because it is a read-only property.`,
      conclusion: {
        es: "üî• Beneficio: El mapeo de tipos permite transformar propiedades de un tipo existente de manera consistente y reutilizable.",
        en: "üî• Benefit: Type mapping allows transforming properties of an existing type consistently and reusably."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Generics Avanzados?",
        en: "üìå When NOT to use Advanced Generics?"
      },
      content: {
        es: [
          "‚ùå Si el proyecto es demasiado peque√±o y no requiere tipos gen√©ricos complejos.",
          "‚ùå Si prefieres evitar la complejidad innecesaria al usar generics avanzados en casos triviales.",
          "‚ùå Si el uso excesivo de generics avanzados complica la lectura y mantenibilidad del c√≥digo."
        ],
        en: [
          "‚ùå If the project is too small and does not require complex generic types.",
          "‚ùå If you prefer to avoid unnecessary complexity when using advanced generics in trivial cases.",
          "‚ùå If excessive use of advanced generics complicates code readability and maintainability."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los generics avanzados son ideales para crear tipos y funciones gen√©ricas m√°s flexibles y potentes.",
      "‚úÖ Permiten aplicar restricciones, inferencia condicional, mapeo de tipos y utilidades de tipo.",
      "‚úÖ No deben usarse si generan complejidad innecesaria o dificultan la comprensi√≥n del c√≥digo."
    ],
    en: [
      "‚úÖ Advanced generics are ideal for creating more flexible and powerful generic types and functions.",
      "‚úÖ They allow applying constraints, conditional inference, type mapping, and type utilities.",
      "‚úÖ They should not be used if they generate unnecessary complexity or make the code harder to understand."
    ]
  }
};

export default concept;