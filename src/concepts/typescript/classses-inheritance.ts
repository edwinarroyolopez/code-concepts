import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Clases y Herencia en TypeScript",
    en: "Classes and Inheritance in TypeScript"
  },
  slug: "classes-inheritance",
  description: {
    es: "Las clases en TypeScript permiten modelar entidades con propiedades y m√©todos, mientras que la herencia permite que una clase derive de otra, reutilizando y extendiendo su funcionalidad. Esto facilita la creaci√≥n de c√≥digo modular y escalable.",
    en: "Classes in TypeScript allow modeling entities with properties and methods, while inheritance enables a class to derive from another, reusing and extending its functionality. This facilitates the creation of modular and scalable code."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son las Clases y la Herencia?",
        en: "üîπWhat are Classes and Inheritance?"
      },
      code: `// Definici√≥n de una clase
class Animal {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  speak(): void {
    console.log(\`\${this.name} makes a noise.\`);
  }
}

// Herencia de una clase
class Dog extends Animal {
  breed: string;

  constructor(name: string, breed: string) {
    super(name);
    this.breed = breed;
  }

  speak(): void {
    console.log(\`\${this.name} barks.\`);
  }
}`,
      content: {
        es: "Una **clase** en TypeScript es una plantilla para crear objetos que encapsulan datos (propiedades) y comportamiento (m√©todos). La **herencia** permite que una clase derive de otra, reutilizando sus propiedades y m√©todos. Adem√°s, las clases derivadas pueden sobrescribir m√©todos o agregar nuevas funcionalidades. Las clases y la herencia son fundamentales para la programaci√≥n orientada a objetos, facilitando la organizaci√≥n y reutilizaci√≥n del c√≥digo.",
        en: "A **class** in TypeScript is a blueprint for creating objects that encapsulate data (properties) and behavior (methods). **Inheritance** allows a class to derive from another, reusing its properties and methods. Additionally, derived classes can override methods or add new functionality. Classes and inheritance are fundamental to object-oriented programming, facilitating code organization and reuse."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Clases y Herencia?",
        en: "üîπWhen to use Classes and Inheritance?"
      },
      content: {
        es: [
          "Cuando necesitas modelar entidades con propiedades y comportamientos compartidos.",
          "Cuando deseas reutilizar c√≥digo mediante la herencia, evitando duplicaciones.",
          "Cuando trabajas con jerarqu√≠as de objetos que comparten funcionalidad com√∫n.",
          "Cuando necesitas implementar polimorfismo, permitiendo que diferentes clases compartan una interfaz com√∫n."
        ],
        en: [
          "When you need to model entities with shared properties and behaviors.",
          "When you want to reuse code through inheritance, avoiding duplication.",
          "When working with object hierarchies that share common functionality.",
          "When you need to implement polymorphism, allowing different classes to share a common interface."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπCaracter√≠sticas de Clases y Herencia",
        en: "üîπFeatures of Classes and Inheritance"
      },
      headers: {
        es: ["Caracter√≠stica", "Descripci√≥n", "Ejemplo"],
        en: ["Feature", "Description", "Example"]
      },
      rows: [
        {
          es: ["Constructor", "Inicializa las propiedades de una clase", "`constructor(name: string) { this.name = name; }`"],
          en: ["Constructor", "Initializes the properties of a class", "`constructor(name: string) { this.name = name; }`"]
        },
        {
          es: ["Herencia", "Una clase deriva de otra", "`class Dog extends Animal { ... }`"],
          en: ["Inheritance", "One class derives from another", "`class Dog extends Animal { ... }`"]
        },
        {
          es: ["M√©todos", "Definen el comportamiento de una clase", "`speak(): void { ... }`"],
          en: ["Methods", "Define the behavior of a class", "`speak(): void { ... }`"]
        },
        {
          es: ["Sobrescritura", "Un m√©todo en la clase derivada reemplaza al de la clase base", "`speak(): void { console.log('Bark'); }`"],
          en: ["Overriding", "A method in the derived class replaces the one in the base class", "`speak(): void { console.log('Bark'); }`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Clase",
        en: "1Ô∏è‚É£ Practical example of Class"
      },
      caseTitle: {
        es: "Definici√≥n y Uso de una Clase",
        en: "Definition and Usage of a Class"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo definir y usar una clase simple en TypeScript.",
        en: "This example demonstrates how to define and use a simple class in TypeScript."
      },
      code: `// Definici√≥n de la clase
class Car {
  brand: string;
  year: number;

  constructor(brand: string, year: number) {
    this.brand = brand;
    this.year = year;
  }

  displayInfo(): void {
    console.log(\`Brand: \${this.brand}, Year: \${this.year}\`);
  }
}

// Uso de la clase
const myCar = new Car('Toyota', 2020);
myCar.displayInfo(); // Brand: Toyota, Year: 2020`,
      conclusion: {
        es: "üî• Beneficio: Las clases permiten encapsular datos y comportamiento en una estructura clara y reutilizable.",
        en: "üî• Benefit: Classes allow encapsulating data and behavior into a clear and reusable structure."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Herencia",
        en: "2Ô∏è‚É£ Practical example of Inheritance"
      },
      caseTitle: {
        es: "Extender una Clase Base",
        en: "Extending a Base Class"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo extender una clase base para agregar funcionalidad adicional.",
        en: "This example demonstrates how to extend a base class to add additional functionality."
      },
      code: `// Clase base
class Vehicle {
  brand: string;

  constructor(brand: string) {
    this.brand = brand;
  }

  drive(): void {
    console.log(\`\${this.brand} is driving.\`);
  }
}

// Clase derivada
class ElectricCar extends Vehicle {
  batteryLife: number;

  constructor(brand: string, batteryLife: number) {
    super(brand);
    this.batteryLife = batteryLife;
  }

  charge(): void {
    console.log(\`\${this.brand} is charging. Battery life: \${this.batteryLife} hours.\`);
  }
}

// Uso de la clase derivada
const tesla = new ElectricCar('Tesla', 8);
tesla.drive(); // Tesla is driving.
tesla.charge(); // Tesla is charging. Battery life: 8 hours.`,
      conclusion: {
        es: "üî• Beneficio: La herencia permite reutilizar y ampliar la funcionalidad de una clase base sin duplicar c√≥digo.",
        en: "üî• Benefit: Inheritance allows reusing and extending the functionality of a base class without duplicating code."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Sobrescritura de M√©todos",
        en: "3Ô∏è‚É£ Practical example of Method Overriding"
      },
      caseTitle: {
        es: "Sobrescribir un M√©todo en la Clase Derivada",
        en: "Overriding a Method in the Derived Class"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo sobrescribir un m√©todo en una clase derivada para modificar su comportamiento.",
        en: "This example demonstrates how to override a method in a derived class to modify its behavior."
      },
      code: `// Clase base
class Shape {
  draw(): void {
    console.log('Drawing a shape.');
  }
}

// Clase derivada
class Circle extends Shape {
  draw(): void {
    console.log('Drawing a circle.');
  }
}

// Uso de la clase derivada
const shape = new Shape();
shape.draw(); // Drawing a shape.

const circle = new Circle();
circle.draw(); // Drawing a circle.`,
      conclusion: {
        es: "üî• Beneficio: La sobrescritura de m√©todos permite personalizar el comportamiento de una clase derivada seg√∫n sea necesario.",
        en: "üî• Benefit: Method overriding allows customizing the behavior of a derived class as needed."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Clases y Herencia?",
        en: "üìå When NOT to use Classes and Inheritance?"
      },
      content: {
        es: [
          "‚ùå Si los datos son demasiado simples y no requieren una estructura formal.",
          "‚ùå Si prefieres evitar la verbosidad innecesaria en casos triviales.",
          "‚ùå Si el uso excesivo de herencia crea jerarqu√≠as complejas y dif√≠ciles de mantener."
        ],
        en: [
          "‚ùå If the data is too simple and does not require a formal structure.",
          "‚ùå If you prefer to avoid unnecessary verbosity in trivial cases.",
          "‚ùå If excessive use of inheritance creates complex and hard-to-maintain hierarchies."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Las clases son ideales para modelar entidades con propiedades y comportamientos compartidos.",
      "‚úÖ La herencia permite reutilizar y ampliar funcionalidades, mejorando la modularidad del c√≥digo.",
      "‚úÖ No deben usarse de manera excesiva si los datos son simples o si complican la lectura del c√≥digo."
    ],
    en: [
      "‚úÖ Classes are ideal for modeling entities with shared properties and behaviors.",
      "‚úÖ Inheritance allows reusing and extending functionality, improving code modularity.",
      "‚úÖ They should not be used excessively if the data is simple or if they complicate code readability."
    ]
  }
};

export default concept;