import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "M√≥dulos y Namespaces en TypeScript",
    en: "Modules and Namespaces in TypeScript"
  },
  slug: "modules-namespaces",
  description: {
    es: "Los m√≥dulos y namespaces en TypeScript permiten organizar y estructurar c√≥digo en proyectos grandes. Los m√≥dulos son archivos independientes que exportan e importan funcionalidades, mientras que los namespaces agrupan c√≥digo relacionado bajo un √∫nico √°mbito global.",
    en: "Modules and namespaces in TypeScript allow organizing and structuring code in large projects. Modules are standalone files that export and import functionalities, while namespaces group related code under a single global scope."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los M√≥dulos y Namespaces?",
        en: "üîπWhat are Modules and Namespaces?"
      },
      code: `// Ejemplo de m√≥dulo
// math.ts
export function add(a: number, b: number): number {
  return a + b;
}

// main.ts
import { add } from './math';
console.log(add(2, 3)); // 5

// Ejemplo de namespace
namespace Utils {
  export function formatDate(date: Date): string {
    return date.toISOString();
  }
}
console.log(Utils.formatDate(new Date()));`,
      content: {
        es: "Los **m√≥dulos** en TypeScript son archivos independientes que encapsulan c√≥digo y permiten exportar e importar funcionalidades entre ellos. Son ideales para proyectos grandes y modernos, ya que promueven la modularidad y reutilizaci√≥n del c√≥digo. Los **namespaces**, por otro lado, son una forma de agrupar c√≥digo relacionado bajo un √∫nico √°mbito global, lo que puede ser √∫til en proyectos m√°s peque√±os o cuando no se desea usar m√≥dulos.",
        en: "Modules in TypeScript are standalone files that encapsulate code and allow exporting and importing functionalities between them. They are ideal for large and modern projects, as they promote modularity and code reuse. Namespaces, on the other hand, are a way to group related code under a single global scope, which can be useful in smaller projects or when modules are not desired."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar M√≥dulos y Namespaces?",
        en: "üîπWhen to use Modules and Namespaces?"
      },
      content: {
        es: [
          "Usa **m√≥dulos** cuando trabajas en proyectos grandes y necesitas dividir el c√≥digo en archivos independientes.",
          "Usa **namespaces** cuando trabajas en proyectos peque√±os o necesitas agrupar c√≥digo relacionado sin modularizarlo.",
          "Usa m√≥dulos para aprovechar las caracter√≠sticas modernas de JavaScript, como `import` y `export`.",
          "Usa namespaces si prefieres evitar la configuraci√≥n adicional requerida por los m√≥dulos (como `tsconfig.json`)."
        ],
        en: [
          "Use **modules** when working on large projects and need to split the code into independent files.",
          "Use **namespaces** when working on small projects or need to group related code without modularizing it.",
          "Use modules to take advantage of modern JavaScript features like `import` and `export`.",
          "Use namespaces if you prefer to avoid the additional configuration required by modules (like `tsconfig.json`)."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre M√≥dulos y Namespaces",
        en: "üîπComparison between Modules and Namespaces"
      },
      headers: {
        es: ["Caracter√≠stica", "M√≥dulos", "Namespaces"],
        en: ["Feature", "Modules", "Namespaces"]
      },
      rows: [
        {
          es: ["Uso com√∫n", "Proyectos grandes y modernos", "Proyectos peque√±os o espec√≠ficos"],
          en: ["Common use", "Large and modern projects", "Small or specific projects"]
        },
        {
          es: ["Alcance", "Archivos independientes", "√Åmbito global compartido"],
          en: ["Scope", "Independent files", "Shared global scope"]
        },
        {
          es: ["Exportaci√≥n/Importaci√≥n", "`export` y `import`", "`namespace` y `export` dentro del mismo archivo"],
          en: ["Export/Import", "`export` and `import`", "`namespace` and `export` within the same file"]
        },
        {
          es: ["Compatibilidad", "Requiere configuraci√≥n (e.g., `tsconfig.json`)", "No requiere configuraci√≥n adicional"],
          en: ["Compatibility", "Requires configuration (e.g., `tsconfig.json`)", "Does not require additional configuration"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de M√≥dulos",
        en: "1Ô∏è‚É£ Practical example of Modules"
      },
      caseTitle: {
        es: "Exportar e Importar Funcionalidades con M√≥dulos",
        en: "Exporting and Importing Functionalities with Modules"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo exportar e importar funcionalidades usando m√≥dulos en TypeScript.",
        en: "This example demonstrates how to export and import functionalities using modules in TypeScript."
      },
      code: `// math.ts
export function add(a: number, b: number): number {
  return a + b;
}

export function subtract(a: number, b: number): number {
  return a - b;
}

// main.ts
import { add, subtract } from './math';

console.log(add(5, 3)); // 8
console.log(subtract(5, 3)); // 2`,
      conclusion: {
        es: "üî• Beneficio: Los m√≥dulos permiten dividir el c√≥digo en archivos independientes, mejorando la organizaci√≥n y reutilizaci√≥n del c√≥digo.",
        en: "üî• Benefit: Modules allow splitting code into independent files, improving organization and code reuse."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Namespaces",
        en: "2Ô∏è‚É£ Practical example of Namespaces"
      },
      caseTitle: {
        es: "Agrupar C√≥digo Relacionado con Namespaces",
        en: "Grouping Related Code with Namespaces"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo agrupar c√≥digo relacionado usando namespaces en TypeScript.",
        en: "This example demonstrates how to group related code using namespaces in TypeScript."
      },
      code: `namespace Geometry {
  export function calculateArea(width: number, height: number): number {
    return width * height;
  }

  export function calculatePerimeter(width: number, height: number): number {
    return 2 * (width + height);
  }
}

console.log(Geometry.calculateArea(5, 3)); // 15
console.log(Geometry.calculatePerimeter(5, 3)); // 16`,
      conclusion: {
        es: "üî• Beneficio: Los namespaces permiten agrupar c√≥digo relacionado bajo un √∫nico √°mbito global, facilitando la organizaci√≥n en proyectos peque√±os.",
        en: "üî• Benefit: Namespaces allow grouping related code under a single global scope, facilitating organization in small projects."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Combinaci√≥n de M√≥dulos y Namespaces",
        en: "3Ô∏è‚É£ Practical example of Combining Modules and Namespaces"
      },
      caseTitle: {
        es: "Usar Namespaces Dentro de M√≥dulos",
        en: "Using Namespaces Within Modules"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo combinar m√≥dulos y namespaces para organizar c√≥digo en proyectos m√°s complejos.",
        en: "This example demonstrates how to combine modules and namespaces to organize code in more complex projects."
      },
      code: `// geometry.ts
export namespace Geometry {
  export function calculateArea(width: number, height: number): number {
    return width * height;
  }

  export function calculatePerimeter(width: number, height: number): number {
    return 2 * (width + height);
  }
}

// main.ts
import { Geometry } from './geometry';

console.log(Geometry.calculateArea(5, 3)); // 15
console.log(Geometry.calculatePerimeter(5, 3)); // 16`,
      conclusion: {
        es: "üî• Beneficio: Combinar m√≥dulos y namespaces permite aprovechar las ventajas de ambos enfoques, organizando el c√≥digo de manera modular y agrupada.",
        en: "üî• Benefit: Combining modules and namespaces allows leveraging the advantages of both approaches, organizing code in a modular and grouped manner."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar M√≥dulos y Namespaces?",
        en: "üìå When NOT to use Modules and Namespaces?"
      },
      content: {
        es: [
          "‚ùå Si el proyecto es demasiado peque√±o y no requiere modularizaci√≥n.",
          "‚ùå Si prefieres evitar la verbosidad innecesaria al usar namespaces en proyectos modernos.",
          "‚ùå Si el uso excesivo de namespaces crea conflictos de nombres globales."
        ],
        en: [
          "‚ùå If the project is too small and does not require modularization.",
          "‚ùå If you prefer to avoid unnecessary verbosity when using namespaces in modern projects.",
          "‚ùå If excessive use of namespaces creates global name conflicts."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los m√≥dulos son ideales para proyectos grandes y modernos, promoviendo la modularidad y reutilizaci√≥n del c√≥digo.",
      "‚úÖ Los namespaces son √∫tiles para proyectos peque√±os o cuando se necesita agrupar c√≥digo relacionado.",
      "‚úÖ No deben usarse de manera excesiva si complican la lectura o mantenibilidad del c√≥digo."
    ],
    en: [
      "‚úÖ Modules are ideal for large and modern projects, promoting modularity and code reuse.",
      "‚úÖ Namespaces are useful for small projects or when you need to group related code.",
      "‚úÖ They should not be used excessively if they complicate code readability or maintainability."
    ]
  }
};

export default concept;