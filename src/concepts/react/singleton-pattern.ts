import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Patr√≥n Singleton en React",
    en: "Singleton Pattern in React"
  },
  slug: "singleton-pattern",
  description: {
    es: "El Patr√≥n Singleton es un patr√≥n de dise√±o que garantiza que una clase o instancia tenga una √∫nica instancia compartida en toda la aplicaci√≥n. En React, este patr√≥n se utiliza com√∫nmente para gestionar estados globales, servicios compartidos o configuraciones globales.",
    en: "The Singleton Pattern is a design pattern that ensures a class or instance has only one shared instance throughout the application. In React, this pattern is commonly used to manage global states, shared services, or global configurations."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© es el Patr√≥n Singleton?",
        en: "üîπWhat is the Singleton Pattern?"
      },
      code: `class Singleton { static instance; }`,
      content: {
        es: "El Patr√≥n Singleton asegura que una clase tenga una √∫nica instancia y proporciona un punto de acceso global a esa instancia. En React, esto puede implementarse mediante Context API, m√≥dulos ES6 o clases para gestionar estados o servicios compartidos.",
        en: "The Singleton Pattern ensures that a class has only one instance and provides a global access point to that instance. In React, this can be implemented using Context API, ES6 modules, or classes to manage shared states or services."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar el Patr√≥n Singleton?",
        en: "üîπWhen to use the Singleton Pattern?"
      },
      content: {
        es: [
          "Cuando necesitas compartir un estado global entre m√∫ltiples componentes.",
          "Cuando quieres centralizar la gesti√≥n de servicios o utilidades compartidas.",
          "Cuando deseas evitar la creaci√≥n de m√∫ltiples instancias de un objeto o servicio."
        ],
        en: [
          "When you need to share a global state between multiple components.",
          "When you want to centralize the management of shared services or utilities.",
          "When you want to avoid creating multiple instances of an object or service."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre Patr√≥n Singleton y Estados Locales",
        en: "üîπComparison between Singleton Pattern and Local States"
      },
      headers: {
        es: ["Caracter√≠stica", "Patr√≥n Singleton", "Estados Locales"],
        en: ["Feature", "Singleton Pattern", "Local States"]
      },
      rows: [
        {
          es: ["Compartici√≥n de estado", "‚úÖ Global (compartido)", "‚ùå Local (aislado)"],
          en: ["State sharing", "‚úÖ Global (shared)", "‚ùå Local (isolated)"]
        },
        {
          es: ["Centralizaci√≥n", "‚úÖ Alta (gesti√≥n centralizada)", "‚ùå Baja (dispersa)"],
          en: ["Centralization", "‚úÖ High (centralized management)", "‚ùå Low (scattered)"]
        },
        {
          es: ["Escalabilidad", "‚úÖ Escalable (global)", "‚ùå Menos escalable (local)"],
          en: ["Scalability", "‚úÖ Scalable (global)", "‚ùå Less scalable (local)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n Singleton",
        en: "1Ô∏è‚É£ Practical example of the Singleton Pattern"
      },
      caseTitle: {
        es: "Uso b√°sico con ES6 Modules",
        en: "Basic usage with ES6 Modules"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo implementar el Patr√≥n Singleton usando un m√≥dulo ES6 para gestionar un estado global compartido.",
        en: "This example demonstrates how to implement the Singleton Pattern using an ES6 module to manage a shared global state."
      },
      code: `// singleton.js
let instance;
let counter = 0;

class Singleton {
  constructor() {
    if (!instance) {
      instance = this;
    }
    return instance;
  }

  increment() {
    counter++;
    console.log(\`Contador: \${counter}\`);
  }

  getCounter() {
    return counter;
  }
}

export default new Singleton();

// Uso en la aplicaci√≥n
import singleton from './singleton';

singleton.increment(); // Contador: 1
singleton.increment(); // Contador: 2
console.log(singleton.getCounter()); // 2`,
      conclusion: {
        es: "üî• Beneficio: El m√≥dulo ES6 asegura que solo exista una √∫nica instancia del contador, compartida en toda la aplicaci√≥n.",
        en: "üî• Benefit: The ES6 module ensures that only one instance of the counter exists, shared throughout the application."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n Singleton",
        en: "2Ô∏è‚É£ Practical example of the Singleton Pattern"
      },
      caseTitle: {
        es: "Singleton con Context API",
        en: "Singleton with Context API"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo combinar el Patr√≥n Singleton con Context API para gestionar un estado global compartido.",
        en: "This example demonstrates how to combine the Singleton Pattern with Context API to manage a shared global state."
      },
      code: `import React, { createContext, useContext, useState } from 'react';

// Crear un contexto
const SingletonContext = createContext();

// Proveedor de contexto
function SingletonProvider({ children }) {
  const [state, setState] = useState(0);

  return (
    <SingletonContext.Provider value={{ state, setState }}>
      {children}
    </SingletonContext.Provider>
  );
}

// Hook personalizado
function useSingleton() {
  const context = useContext(SingletonContext);
  if (!context) {
    throw new Error('useSingleton debe usarse dentro de un SingletonProvider');
  }
  return context;
}

// Componente consumidor
function CounterDisplay() {
  const { state } = useSingleton();
  return <p>Contador: {state}</p>;
}

function CounterButton() {
  const { setState } = useSingleton();
  return <button onClick={() => setState((prev) => prev + 1)}>Incrementar</button>;
}

// Uso en la aplicaci√≥n
function App() {
  return (
    <SingletonProvider>
      <CounterDisplay />
      <CounterButton />
    </SingletonProvider>
  );
}

export default App;`,
      conclusion: {
        es: "üî• Beneficio: Context API act√∫a como un Singleton para gestionar un estado global compartido entre componentes.",
        en: "üî• Benefit: Context API acts as a Singleton to manage a shared global state across components."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n Singleton",
        en: "3Ô∏è‚É£ Practical example of the Singleton Pattern"
      },
      caseTitle: {
        es: "Singleton para servicios compartidos",
        en: "Singleton for shared services"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar el Patr√≥n Singleton para crear un servicio compartido que gestione datos globales, como una API de autenticaci√≥n.",
        en: "This example demonstrates how to use the Singleton Pattern to create a shared service that manages global data, such as an authentication API."
      },
      code: `// authService.js
let instance;

class AuthService {
  constructor() {
    if (!instance) {
      instance = this;
    }
    this.isAuthenticated = false;
    return instance;
  }

  login() {
    this.isAuthenticated = true;
    console.log('Usuario autenticado');
  }

  logout() {
    this.isAuthenticated = false;
    console.log('Usuario desautenticado');
  }

  isAuthenticatedUser() {
    return this.isAuthenticated;
  }
}

export default new AuthService();

// Uso en la aplicaci√≥n
import authService from './authService';

authService.login(); // Usuario autenticado
console.log(authService.isAuthenticatedUser()); // true
authService.logout(); // Usuario desautenticado
console.log(authService.isAuthenticatedUser()); // false`,
      conclusion: {
        es: "üî• Beneficio: El servicio de autenticaci√≥n es √∫nico en toda la aplicaci√≥n, lo que garantiza consistencia y evita duplicaciones.",
        en: "üî• Benefit: The authentication service is unique throughout the application, ensuring consistency and avoiding duplication."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar el Patr√≥n Singleton?",
        en: "üìå When NOT to use the Singleton Pattern?"
      },
      content: {
        es: [
          "‚ùå Si el estado o servicio no necesita ser compartido globalmente.",
          "‚ùå Si prefieres mantener los estados locales para simplificar el flujo de datos.",
          "‚ùå Si el uso del patr√≥n introduce complejidad innecesaria en aplicaciones peque√±as."
        ],
        en: [
          "‚ùå If the state or service does not need to be shared globally.",
          "‚ùå If you prefer keeping local states to simplify data flow.",
          "‚ùå If using the pattern introduces unnecessary complexity in small applications."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ El Patr√≥n Singleton es ideal para gestionar estados globales o servicios compartidos en una aplicaci√≥n.",
      "‚úÖ Permite centralizar la l√≥gica y garantizar consistencia en toda la aplicaci√≥n.",
      "‚úÖ No debe usarse en exceso, ya que puede complicar la estructura si no se gestiona adecuadamente."
    ],
    en: [
      "‚úÖ The Singleton Pattern is ideal for managing global states or shared services in an application.",
      "‚úÖ It allows centralizing logic and ensuring consistency throughout the application.",
      "‚úÖ It should not be overused, as it can complicate the structure if not managed properly."
    ]
  }
};

export default concept;