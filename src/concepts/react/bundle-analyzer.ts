
import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Bundle Analyzer en React",
    en: "Bundle Analyzer in React"
  },
  slug: "bundle-analyzer",
  description: {
    es: "El Bundle Analyzer es una herramienta que permite analizar y visualizar el tamaño de los paquetes generados durante el proceso de empaquetado. En React, esta herramienta es útil para identificar dependencias grandes o innecesarias que pueden afectar el rendimiento de la aplicación.",
    en: "The Bundle Analyzer is a tool that allows analyzing and visualizing the size of bundles generated during the bundling process. In React, this tool is useful for identifying large or unnecessary dependencies that may impact application performance."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "🔹¿Qué es Bundle Analyzer?",
        en: "🔹What is Bundle Analyzer?"
      },
      code: `webpack-bundle-analyzer`,
      content: {
        es: "Bundle Analyzer es una herramienta que genera un informe visual detallado del tamaño de cada módulo y dependencia en el paquete final. Esto ayuda a identificar áreas para optimización, como eliminar código no utilizado o reemplazar bibliotecas pesadas.",
        en: "Bundle Analyzer is a tool that generates a detailed visual report of the size of each module and dependency in the final bundle. This helps identify areas for optimization, such as removing unused code or replacing heavy libraries."
      }
    },
    {
      type: "list",
      title: {
        es: "🔹¿Cuándo usar Bundle Analyzer?",
        en: "🔹When to use Bundle Analyzer?"
      },
      content: {
        es: [
          "Cuando necesitas identificar dependencias grandes o innecesarias en tu proyecto.",
          "Cuando deseas optimizar el tamaño del paquete para mejorar los tiempos de carga.",
          "Cuando trabajas con herramientas de empaquetado como Webpack o Rollup."
        ],
        en: [
          "When you need to identify large or unnecessary dependencies in your project.",
          "When you want to optimize the bundle size to improve load times.",
          "When working with bundling tools like Webpack or Rollup."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "🔹Comparación entre Bundle Analyzer y Sin Análisis",
        en: "🔹Comparison between Bundle Analyzer and No Analysis"
      },
      headers: {
        es: ["Característica", "Con Bundle Analyzer", "Sin Análisis"],
        en: ["Feature", "With Bundle Analyzer", "Without Analysis"]
      },
      rows: [
        {
          es: ["Identificación de problemas", "✅ Fácil (visual)", "❌ Difícil (manual)"],
          en: ["Problem identification", "✅ Easy (visual)", "❌ Difficult (manual)"]
        },
        {
          es: ["Optimización", "✅ Guiada por datos", "❌ Basada en suposiciones"],
          en: ["Optimization", "✅ Data-driven", "❌ Assumption-based"]
        },
        {
          es: ["Tiempo de análisis", "✅ Rápido (automatizado)", "❌ Lento (manual)"],
          en: ["Analysis time", "✅ Fast (automated)", "❌ Slow (manual)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1️⃣ Ejemplo práctico de Bundle Analyzer",
        en: "1️⃣ Practical example of Bundle Analyzer"
      },
      caseTitle: {
        es: "Configuración básica con Webpack",
        en: "Basic setup with Webpack"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo configurar Webpack Bundle Analyzer en un proyecto React para generar un informe visual del tamaño del paquete.",
        en: "This example demonstrates how to set up Webpack Bundle Analyzer in a React project to generate a visual report of the bundle size."
      },
      code: `// webpack.config.js
const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');

module.exports = {
  mode: 'production',
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: __dirname + '/dist',
  },
  plugins: [
    new BundleAnalyzerPlugin(), // Habilita el análisis del paquete
  ],
};`,
      conclusion: {
        es: "🔥 Beneficio: El informe generado por Bundle Analyzer permite identificar rápidamente dependencias grandes o innecesarias.",
        en: "🔥 Benefit: The report generated by Bundle Analyzer allows quickly identifying large or unnecessary dependencies."
      }
    },
    {
      type: "example",
      title: {
        es: "2️⃣ Ejemplo práctico de Bundle Analyzer",
        en: "2️⃣ Practical example of Bundle Analyzer"
      },
      caseTitle: {
        es: "Análisis con Vite",
        en: "Analysis with Vite"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo usar un plugin de análisis de paquetes en Vite, una alternativa moderna a Webpack.",
        en: "This example demonstrates how to use a bundle analysis plugin in Vite, a modern alternative to Webpack."
      },
      code: `// vite.config.js
import { defineConfig } from 'vite';
import { visualizer } from 'rollup-plugin-visualizer';

export default defineConfig({
  plugins: [
    visualizer({ open: true }), // Genera un informe visual del paquete
  ],
});`,
      conclusion: {
        es: "🔥 Beneficio: El plugin `rollup-plugin-visualizer` genera un informe interactivo del tamaño del paquete en Vite.",
        en: "🔥 Benefit: The `rollup-plugin-visualizer` plugin generates an interactive report of the bundle size in Vite."
      }
    },
    {
      type: "example",
      title: {
        es: "3️⃣ Ejemplo práctico de Bundle Analyzer",
        en: "3️⃣ Practical example of Bundle Analyzer"
      },
      caseTitle: {
        es: "Identificación de dependencias grandes",
        en: "Identification of large dependencies"
      },
      caseDescription: {
        es: "Este ejemplo muestra cómo interpretar un informe de Bundle Analyzer para identificar y optimizar dependencias grandes.",
        en: "This example demonstrates how to interpret a Bundle Analyzer report to identify and optimize large dependencies."
      },
      code: `// Resultado del análisis
// ┌───────────────────────────────┐
// │ react-dom: 120 KB             │
// │ lodash: 80 KB                 │
// │ moment: 50 KB                 │
// │ custom-utils: 10 KB           │
// └───────────────────────────────┘

// Acciones recomendadas:
// 1. Reemplazar 'lodash' con funciones ES6 nativas.
// 2. Usar 'date-fns' en lugar de 'moment'.
// 3. Dividir 'react-dom' con Code Splitting.`,
      conclusion: {
        es: "🔥 Beneficio: Al identificar dependencias grandes, puedes tomar decisiones informadas para reducir el tamaño del paquete.",
        en: "🔥 Benefit: By identifying large dependencies, you can make informed decisions to reduce the bundle size."
      }
    },
    {
      type: "list",
      title: {
        es: "📌 ¿Cuándo NO usar Bundle Analyzer?",
        en: "📌 When NOT to use Bundle Analyzer?"
      },
      content: {
        es: [
          "❌ Si tu proyecto es pequeño y el tamaño del paquete no es un problema.",
          "❌ Si prefieres enfocarte en otras áreas de optimización antes de analizar el paquete.",
          "❌ Si no tienes acceso a herramientas de empaquetado compatibles con Bundle Analyzer."
        ],
        en: [
          "❌ If your project is small and bundle size is not an issue.",
          "❌ If you prefer focusing on other optimization areas before analyzing the bundle.",
          "❌ If you do not have access to bundling tools compatible with Bundle Analyzer."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "✅ Bundle Analyzer es ideal para identificar y optimizar dependencias grandes o innecesarias.",
      "✅ Mejora la eficiencia del paquete final y los tiempos de carga de la aplicación.",
      "✅ No debe usarse en exceso si el tamaño del paquete no es un problema significativo."
    ],
    en: [
      "✅ Bundle Analyzer is ideal for identifying and optimizing large or unnecessary dependencies.",
      "✅ It improves the efficiency of the final bundle and application load times.",
      "✅ It should not be overused if bundle size is not a significant issue."
    ]
  }
};

export default concept;