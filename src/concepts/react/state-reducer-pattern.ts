import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Patr√≥n State Reducer en React",
    en: "State Reducer Pattern in React"
  },
  slug: "state-reducer-pattern",
  description: {
    es: "El Patr√≥n State Reducer es un patr√≥n avanzado en React que permite externalizar la l√≥gica de actualizaci√≥n del estado de un componente. Esto se logra mediante una funci√≥n reductora (reducer) que controla c√≥mo se actualiza el estado en respuesta a acciones espec√≠ficas.",
    en: "The State Reducer Pattern is an advanced pattern in React that allows externalizing the state update logic of a component. This is achieved through a reducer function that controls how the state is updated in response to specific actions."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© es el Patr√≥n State Reducer?",
        en: "üîπWhat is the State Reducer Pattern?"
      },
      code: `function reducer(state, action) { /* ... */ }`,
      content: {
        es: "El Patr√≥n State Reducer encapsula la l√≥gica de actualizaci√≥n del estado en una funci√≥n reductora externa. Esto permite que los consumidores del componente puedan personalizar c√≥mo se maneja el estado sin modificar la implementaci√≥n interna del componente.",
        en: "The State Reducer Pattern encapsulates the state update logic in an external reducer function. This allows consumers of the component to customize how the state is handled without modifying the internal implementation of the component."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar el Patr√≥n State Reducer?",
        en: "üîπWhen to use the State Reducer Pattern?"
      },
      content: {
        es: [
          "Cuando necesitas permitir que los usuarios del componente personalicen la l√≥gica de actualizaci√≥n del estado.",
          "Cuando quieres desacoplar la l√≥gica de estado de la implementaci√≥n del componente.",
          "Cuando deseas mejorar la reutilizaci√≥n y flexibilidad de un componente complejo."
        ],
        en: [
          "When you need to allow users of the component to customize the state update logic.",
          "When you want to decouple state logic from the component's implementation.",
          "When you want to improve the reusability and flexibility of a complex component."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre Patr√≥n State Reducer y useState",
        en: "üîπComparison between State Reducer Pattern and useState"
      },
      headers: {
        es: ["Caracter√≠stica", "Patr√≥n State Reducer", "`useState`"],
        en: ["Feature", "State Reducer Pattern", "`useState`"]
      },
      rows: [
        {
          es: ["Personalizaci√≥n", "‚úÖ Alta (l√≥gica externa)", "‚ùå Baja (l√≥gica interna)"],
          en: ["Customization", "‚úÖ High (external logic)", "‚ùå Low (internal logic)"]
        },
        {
          es: ["Reutilizaci√≥n", "‚úÖ Alta (desacoplado)", "‚ùå Baja (acoplado)"],
          en: ["Reusability", "‚úÖ High (decoupled)", "‚ùå Low (coupled)"]
        },
        {
          es: ["Complejidad", "‚úÖ M√°s complejo (avanzado)", "‚ùå M√°s simple (b√°sico)"],
          en: ["Complexity", "‚úÖ More complex (advanced)", "‚ùå Simpler (basic)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n State Reducer",
        en: "1Ô∏è‚É£ Practical example of the State Reducer Pattern"
      },
      caseTitle: {
        es: "Uso b√°sico con `useReducer`",
        en: "Basic usage with `useReducer`"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar `useReducer` para implementar el Patr√≥n State Reducer y externalizar la l√≥gica de actualizaci√≥n del estado.",
        en: "This example demonstrates how to use `useReducer` to implement the State Reducer Pattern and externalize the state update logic."
      },
      code: `import React, { useReducer } from 'react';

// Funci√≥n reductora
function toggleReducer(state, action) {
  switch (action.type) {
    case 'toggle':
      return { on: !state.on };
    default:
      throw new Error('Acci√≥n desconocida');
  }
}

// Componente Toggle
function Toggle({ reducer = toggleReducer }) {
  const [state, dispatch] = useReducer(reducer, { on: false });

  return (
    <div>
      <button onClick={() => dispatch({ type: 'toggle' })}>
        {state.on ? 'Encendido' : 'Apagado'}
      </button>
    </div>
  );
}

export default Toggle;`,
      conclusion: {
        es: "üî• Beneficio: La l√≥gica de actualizaci√≥n del estado est√° encapsulada en una funci√≥n reductora, lo que facilita su personalizaci√≥n.",
        en: "üî• Benefit: The state update logic is encapsulated in a reducer function, making it easier to customize."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n State Reducer",
        en: "2Ô∏è‚É£ Practical example of the State Reducer Pattern"
      },
      caseTitle: {
        es: "Personalizaci√≥n del reductor",
        en: "Reducer customization"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo permitir que los consumidores del componente personalicen la l√≥gica del reductor pasando su propia funci√≥n reductora.",
        en: "This example demonstrates how to allow consumers of the component to customize the reducer logic by passing their own reducer function."
      },
      code: `import React, { useReducer } from 'react';

// Funci√≥n reductora predeterminada
function defaultToggleReducer(state, action) {
  switch (action.type) {
    case 'toggle':
      return { on: !state.on };
    default:
      throw new Error('Acci√≥n desconocida');
  }
}

// Componente Toggle
function Toggle({ reducer = defaultToggleReducer }) {
  const [state, dispatch] = useReducer(reducer, { on: false });

  return (
    <div>
      <button onClick={() => dispatch({ type: 'toggle' })}>
        {state.on ? 'Encendido' : 'Apagado'}
      </button>
    </div>
  );
}

// Personalizaci√≥n del reductor
function customToggleReducer(state, action) {
  if (action.type === 'toggle') {
    return { on: true }; // Siempre encendido
  }
  return state;
}

// Uso en la aplicaci√≥n
function App() {
  return (
    <div>
      <h1>Toggle Predeterminado</h1>
      <Toggle />
      <h1>Toggle Personalizado</h1>
      <Toggle reducer={customToggleReducer} />
    </div>
  );
}

export default App;`,
      conclusion: {
        es: "üî• Beneficio: Los consumidores pueden personalizar completamente la l√≥gica del reductor sin modificar el componente base.",
        en: "üî• Benefit: Consumers can fully customize the reducer logic without modifying the base component."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico del Patr√≥n State Reducer",
        en: "3Ô∏è‚É£ Practical example of the State Reducer Pattern"
      },
      caseTitle: {
        es: "Combinaci√≥n con Context API",
        en: "Combination with Context API"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo combinar el Patr√≥n State Reducer con Context API para gestionar el estado global de manera flexible.",
        en: "This example demonstrates how to combine the State Reducer Pattern with Context API to manage global state in a flexible way."
      },
      code: `import React, { createContext, useContext, useReducer } from 'react';

// Crear un contexto
const ToggleContext = createContext();

// Funci√≥n reductora predeterminada
function defaultToggleReducer(state, action) {
  switch (action.type) {
    case 'toggle':
      return { on: !state.on };
    default:
      throw new Error('Acci√≥n desconocida');
  }
}

// Proveedor de contexto
function ToggleProvider({ reducer = defaultToggleReducer, children }) {
  const [state, dispatch] = useReducer(reducer, { on: false });
  const value = { state, dispatch };

  return (
    <ToggleContext.Provider value={value}>
      {children}
    </ToggleContext.Provider>
  );
}

// Hook personalizado
function useToggle() {
  const context = useContext(ToggleContext);
  if (!context) {
    throw new Error('useToggle debe usarse dentro de un ToggleProvider');
  }
  return context;
}

// Componente Toggle
function ToggleButton() {
  const { state, dispatch } = useToggle();
  return (
    <button onClick={() => dispatch({ type: 'toggle' })}>
      {state.on ? 'Encendido' : 'Apagado'}
    </button>
  );
}

// Uso en la aplicaci√≥n
function App() {
  return (
    <ToggleProvider>
      <ToggleButton />
    </ToggleProvider>
  );
}

export default App;`,
      conclusion: {
        es: "üî• Beneficio: La combinaci√≥n del Patr√≥n State Reducer con Context API permite gestionar el estado global de manera flexible y personalizable.",
        en: "üî• Benefit: Combining the State Reducer Pattern with Context API allows managing global state in a flexible and customizable way."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar el Patr√≥n State Reducer?",
        en: "üìå When NOT to use the State Reducer Pattern?"
      },
      content: {
        es: [
          "‚ùå Si el componente tiene un estado simple y no requiere personalizaci√≥n.",
          "‚ùå Si prefieres mantener la l√≥gica de estado interna para simplificar el c√≥digo.",
          "‚ùå Si el uso del patr√≥n introduce complejidad innecesaria en aplicaciones peque√±as."
        ],
        en: [
          "‚ùå If the component has a simple state and does not require customization.",
          "‚ùå If you prefer keeping the state logic internal to simplify the code.",
          "‚ùå If using the pattern introduces unnecessary complexity in small applications."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ El Patr√≥n State Reducer es ideal para externalizar la l√≥gica de actualizaci√≥n del estado y permitir su personalizaci√≥n.",
      "‚úÖ Permite mejorar la reutilizaci√≥n y flexibilidad de componentes complejos.",
      "‚úÖ No debe usarse en exceso, ya que puede complicar la estructura si no se gestiona adecuadamente."
    ],
    en: [
      "‚úÖ The State Reducer Pattern is ideal for externalizing state update logic and allowing customization.",
      "‚úÖ It improves the reusability and flexibility of complex components.",
      "‚úÖ It should not be overused, as it can complicate the structure if not managed properly."
    ]
  }
};

export default concept;