import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Microfrontends con Next.js",
    en: "Microfrontends with Next.js"
  },
  slug: "microfrontends-nextjs",
  description: {
    es: "Los Microfrontends son una arquitectura que divide una aplicaci√≥n frontend monol√≠tica en partes m√°s peque√±as e independientes. Next.js es una herramienta ideal para implementar esta arquitectura debido a su flexibilidad, soporte para SSR y SSG, y capacidad para integrar m√∫ltiples aplicaciones frontend.",
    en: "Microfrontends are an architecture that splits a monolithic frontend application into smaller, independent parts. Next.js is an ideal tool for implementing this architecture due to its flexibility, support for SSR and SSG, and ability to integrate multiple frontend applications."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son los Microfrontends?",
        en: "üîπWhat are Microfrontends?"
      },
      code: `// Estructura de microfrontends`,
      content: {
        es: "Los Microfrontends son una arquitectura que permite dividir una aplicaci√≥n frontend monol√≠tica en partes m√°s peque√±as y manejables, cada una desarrollada y desplegada de forma independiente. Esto facilita la colaboraci√≥n entre equipos, mejora la escalabilidad y permite actualizaciones incrementales sin afectar toda la aplicaci√≥n.",
        en: "Microfrontends are an architecture that allows splitting a monolithic frontend application into smaller, manageable parts, each developed and deployed independently. This facilitates collaboration between teams, improves scalability, and enables incremental updates without affecting the entire application."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Microfrontends con Next.js?",
        en: "üîπWhen to use Microfrontends with Next.js?"
      },
      content: {
        es: [
          "Cuando trabajas en proyectos grandes con m√∫ltiples equipos que necesitan desarrollar y desplegar de forma independiente.",
          "Cuando deseas mejorar la escalabilidad y mantenibilidad de una aplicaci√≥n monol√≠tica existente.",
          "Cuando quieres aprovechar las caracter√≠sticas avanzadas de Next.js, como SSR, SSG y API Routes, en una arquitectura modular."
        ],
        en: [
          "When working on large projects with multiple teams that need to develop and deploy independently.",
          "When you want to improve the scalability and maintainability of an existing monolithic application.",
          "When you want to leverage advanced features of Next.js, such as SSR, SSG, and API Routes, in a modular architecture."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre Monol√≠tico y Microfrontends",
        en: "üîπComparison between Monolithic and Microfrontends"
      },
      headers: {
        es: ["Caracter√≠stica", "Monol√≠tico", "Microfrontends"],
        en: ["Feature", "Monolithic", "Microfrontends"]
      },
      rows: [
        {
          es: ["Despliegue", "‚ùå Todo junto", "‚úÖ Independiente"],
          en: ["Deployment", "‚ùå All together", "‚úÖ Independent"]
        },
        {
          es: ["Escalabilidad", "‚ùå Limitada", "‚úÖ Alta"],
          en: ["Scalability", "‚ùå Limited", "‚úÖ High"]
        },
        {
          es: ["Colaboraci√≥n", "‚ùå Compleja", "‚úÖ Mejorada (equipos independientes)"],
          en: ["Collaboration", "‚ùå Complex", "‚úÖ Improved (independent teams)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Microfrontends con Next.js",
        en: "1Ô∏è‚É£ Practical example of Microfrontends with Next.js"
      },
      caseTitle: {
        es: "Estructura b√°sica de Microfrontends",
        en: "Basic structure of Microfrontends"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo estructurar una aplicaci√≥n Next.js para implementar Microfrontends.",
        en: "This example demonstrates how to structure a Next.js application to implement Microfrontends."
      },
      code: `// next.config.js
module.exports = {
  webpack(config, options) {
    config.module.rules.push({
      test: /\.md$/,
      use: 'raw-loader',
    });
    return config;
  },
};

// pages/_app.js
import dynamic from 'next/dynamic';

const Header = dynamic(() => import('header-microfrontend'), { ssr: false });
const Footer = dynamic(() => import('footer-microfrontend'), { ssr: false });

export default function App({ Component, pageProps }) {
  return (
    <>
      <Header />
      <Component {...pageProps} />
      <Footer />
    </>
  );
}`,
      conclusion: {
        es: "üî• Beneficio: Cada microfrontend (como Header y Footer) puede ser desarrollado y desplegado de forma independiente, mejorando la modularidad.",
        en: "üî• Benefit: Each microfrontend (such as Header and Footer) can be developed and deployed independently, improving modularity."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Microfrontends con Next.js",
        en: "2Ô∏è‚É£ Practical example of Microfrontends with Next.js"
      },
      caseTitle: {
        es: "Integraci√≥n de Microfrontends con Module Federation",
        en: "Integration of Microfrontends with Module Federation"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar Webpack Module Federation para integrar Microfrontends en una aplicaci√≥n Next.js.",
        en: "This example demonstrates how to use Webpack Module Federation to integrate Microfrontends into a Next.js application."
      },
      code: `// webpack.config.js (Microfrontend A)
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');

module.exports = {
  plugins: [
    new ModuleFederationPlugin({
      name: 'microfrontendA',
      filename: 'remoteEntry.js',
      exposes: {
        './Header': './components/Header',
      },
      shared: ['react', 'react-dom'],
    }),
  ],
};

// next.config.js (Aplicaci√≥n principal)
const { ModuleFederationPlugin } = require('webpack').container;

module.exports = {
  webpack(config) {
    config.plugins.push(
      new ModuleFederationPlugin({
        remotes: {
          microfrontendA: 'microfrontendA@http://localhost:3001/remoteEntry.js',
        },
        shared: ['react', 'react-dom'],
      })
    );
    return config;
  },
};`,
      conclusion: {
        es: "üî• Beneficio: Webpack Module Federation permite cargar Microfrontends din√°micamente en tiempo de ejecuci√≥n, mejorando la flexibilidad.",
        en: "üî• Benefit: Webpack Module Federation allows loading Microfrontends dynamically at runtime, improving flexibility."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Microfrontends con Next.js",
        en: "3Ô∏è‚É£ Practical example of Microfrontends with Next.js"
      },
      caseTitle: {
        es: "Despliegue independiente de Microfrontends",
        en: "Independent deployment of Microfrontends"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo desplegar Microfrontends de forma independiente usando Vercel o servicios similares.",
        en: "This example demonstrates how to deploy Microfrontends independently using Vercel or similar services."
      },
      code: `// Despliegue de Microfrontend A
// vercel.json
{
  "version": 2,
  "builds": [
    { "src": "next.config.js", "use": "@vercel/next" }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "/" }
  ]
}

// Despliegue de Microfrontend B
// vercel.json
{
  "version": 2,
  "builds": [
    { "src": "next.config.js", "use": "@vercel/next" }
  ],
  "routes": [
    { "src": "/(.*)", "dest": "/" }
  ]
}`,
      conclusion: {
        es: "üî• Beneficio: Cada Microfrontend puede ser desplegado de forma independiente, lo que reduce el riesgo y mejora la velocidad de entrega.",
        en: "üî• Benefit: Each Microfrontend can be deployed independently, reducing risk and improving delivery speed."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Microfrontends con Next.js?",
        en: "üìå When NOT to use Microfrontends with Next.js?"
      },
      content: {
        es: [
          "‚ùå Si tu proyecto es peque√±o y no requiere una arquitectura modular.",
          "‚ùå Si prefieres mantener una √∫nica base de c√≥digo para simplificar el desarrollo.",
          "‚ùå Si el uso de Microfrontends introduce complejidad innecesaria en proyectos simples."
        ],
        en: [
          "‚ùå If your project is small and does not require a modular architecture.",
          "‚ùå If you prefer maintaining a single codebase to simplify development.",
          "‚ùå If using Microfrontends introduces unnecessary complexity in simple projects."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Los Microfrontends con Next.js son ideales para proyectos grandes con m√∫ltiples equipos y requisitos de escalabilidad.",
      "‚úÖ Facilitan la colaboraci√≥n, el despliegue independiente y la modularidad.",
      "‚úÖ No deben usarse en exceso si el proyecto no requiere una arquitectura modular."
    ],
    en: [
      "‚úÖ Microfrontends with Next.js are ideal for large projects with multiple teams and scalability requirements.",
      "‚úÖ They facilitate collaboration, independent deployment, and modularity.",
      "‚úÖ They should not be overused if the project does not require a modular architecture."
    ]
  }
};

export default concept;