import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "try/catch en JavaScript",
    en: "try/catch in JavaScript"
  },
  slug: "try-catch",
  description: {
    es: "El bloque try/catch en JavaScript permite manejar errores de manera controlada. El c√≥digo dentro del bloque `try` se ejecuta normalmente, y si ocurre un error, el control pasa al bloque `catch`, donde se puede manejar el error de forma segura.",
    en: "The try/catch block in JavaScript allows handling errors in a controlled manner. The code inside the `try` block executes normally, and if an error occurs, control passes to the `catch` block, where the error can be safely handled."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© es try/catch?",
        en: "üîπWhat is try/catch?"
      },
      code: `try {
  throw new Error('Algo sali√≥ mal');
} catch (error) {
  console.error('Error capturado:', error.message);
}`,
      content: {
        es: "El bloque `try/catch` es una estructura que permite manejar errores en tiempo de ejecuci√≥n. El c√≥digo dentro del bloque `try` se ejecuta normalmente, y si ocurre un error, el control pasa al bloque `catch`, donde se puede capturar y manejar el error. Tambi√©n se puede usar un bloque `finally` opcional para ejecutar c√≥digo independientemente de si ocurri√≥ un error o no.",
        en: "The `try/catch` block is a structure that allows handling runtime errors. The code inside the `try` block executes normally, and if an error occurs, control passes to the `catch` block, where the error can be captured and handled. An optional `finally` block can also be used to execute code regardless of whether an error occurred or not."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar try/catch?",
        en: "üîπWhen to use try/catch?"
      },
      content: {
        es: [
          "Cuando necesitas manejar errores potenciales en operaciones cr√≠ticas, como solicitudes HTTP o lectura de archivos.",
          "Cuando deseas evitar que un error detenga completamente la ejecuci√≥n del programa.",
          "Cuando trabajas con c√≥digo as√≠ncrono que utiliza `async/await` para manejar Promises."
        ],
        en: [
          "When you need to handle potential errors in critical operations, such as HTTP requests or file reading.",
          "When you want to prevent an error from completely halting program execution.",
          "When working with asynchronous code that uses `async/await` to handle Promises."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre try/catch y Manejo de Errores Manual",
        en: "üîπComparison between try/catch and Manual Error Handling"
      },
      headers: {
        es: ["Caracter√≠stica", "try/catch", "Manejo Manual"],
        en: ["Feature", "try/catch", "Manual Handling"]
      },
      rows: [
        {
          es: ["Legibilidad", "‚úÖ M√°s legible", "‚ùå Menos legible"],
          en: ["Readability", "‚úÖ More readable", "‚ùå Less readable"]
        },
        {
          es: ["Control de errores", "‚úÖ Centralizado", "‚ùå Descentralizado"],
          en: ["Error control", "‚úÖ Centralized", "‚ùå Decentralized"]
        },
        {
          es: ["Flexibilidad", "‚úÖ Alto (captura cualquier error)", "‚ùå Bajo (requiere validaciones espec√≠ficas)"],
          en: ["Flexibility", "‚úÖ High (catches any error)", "‚ùå Low (requires specific validations)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de try/catch",
        en: "1Ô∏è‚É£ Practical example of try/catch"
      },
      caseTitle: {
        es: "Uso b√°sico de try/catch",
        en: "Basic usage of try/catch"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar try/catch para capturar y manejar errores en tiempo de ejecuci√≥n.",
        en: "This example demonstrates how to use try/catch to capture and handle runtime errors."
      },
      code: `try {
  const result = riskyOperation();
  console.log('Resultado:', result);
} catch (error) {
  console.error('Error capturado:', error.message);
}

function riskyOperation() {
  throw new Error('Operaci√≥n fallida');
}`,
      conclusion: {
        es: "üî• Beneficio: try/catch permite capturar errores de manera centralizada y evitar que detengan la ejecuci√≥n del programa.",
        en: "üî• Benefit: try/catch allows capturing errors in a centralized way and prevents them from halting program execution."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de try/catch",
        en: "2Ô∏è‚É£ Practical example of try/catch"
      },
      caseTitle: {
        es: "Uso de try/catch con async/await",
        en: "Using try/catch with async/await"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar try/catch con funciones as√≠ncronas que utilizan `async/await`.",
        en: "This example demonstrates how to use try/catch with asynchronous functions that use `async/await`."
      },
      code: `async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    if (!response.ok) {
      throw new Error('Error en la solicitud');
    }
    const data = await response.json();
    console.log('Datos recibidos:', data);
  } catch (error) {
    console.error('Error capturado:', error.message);
  }
}

fetchData();`,
      conclusion: {
        es: "üî• Beneficio: try/catch con async/await simplifica el manejo de errores en c√≥digo as√≠ncrono.",
        en: "üî• Benefit: try/catch with async/await simplifies error handling in asynchronous code."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de try/catch",
        en: "3Ô∏è‚É£ Practical example of try/catch"
      },
      caseTitle: {
        es: "Uso del bloque finally",
        en: "Using the finally block"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar el bloque `finally` para ejecutar c√≥digo despu√©s de intentar una operaci√≥n, independientemente de si ocurri√≥ un error o no.",
        en: "This example demonstrates how to use the `finally` block to execute code after attempting an operation, regardless of whether an error occurred or not."
      },
      code: `try {
  console.log('Intentando operaci√≥n...');
  throw new Error('Algo sali√≥ mal');
} catch (error) {
  console.error('Error capturado:', error.message);
} finally {
  console.log('Bloque finally: Esto siempre se ejecuta.');
}`,
      conclusion: {
        es: "üî• Beneficio: El bloque `finally` asegura que cierto c√≥digo se ejecute siempre, lo que es √∫til para limpieza o cierre de recursos.",
        en: "üî• Benefit: The `finally` block ensures that certain code always executes, which is useful for cleanup or resource closure."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar try/catch?",
        en: "üìå When NOT to use try/catch?"
      },
      content: {
        es: [
          "‚ùå Si el uso de try/catch introduce complejidad innecesaria en casos simples.",
          "‚ùå Si prefieres manejar errores de forma manual en situaciones espec√≠ficas.",
          "‚ùå Si el proyecto requiere un manejo avanzado de errores que no dependa exclusivamente de try/catch."
        ],
        en: [
          "‚ùå If using try/catch introduces unnecessary complexity in simple cases.",
          "‚ùå If you prefer handling errors manually in specific situations.",
          "‚ùå If the project requires advanced error handling that does not rely exclusively on try/catch."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ try/catch es ideal para manejar errores de manera centralizada y evitar que detengan la ejecuci√≥n del programa.",
      "‚úÖ Facilita el manejo de errores en c√≥digo as√≠ncrono cuando se combina con async/await.",
      "‚úÖ No debe usarse en exceso si el manejo de errores puede resolverse de forma m√°s sencilla sin √©l."
    ],
    en: [
      "‚úÖ try/catch is ideal for handling errors in a centralized way and preventing them from halting program execution.",
      "‚úÖ It facilitates error handling in asynchronous code when combined with async/await.",
      "‚úÖ It should not be overused if error handling can be resolved more simply without it."
    ]
  }
};

export default concept;