import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Funciones de Orden Superior en JavaScript",
    en: "Higher-Order Functions in JavaScript"
  },
  slug: "higher-order-functions",
  description: {
    es: "Las funciones de orden superior en JavaScript son funciones que toman otras funciones como argumentos o devuelven funciones como resultado. Permiten escribir c√≥digo m√°s modular, reutilizable y declarativo, facilitando la programaci√≥n funcional.",
    en: "Higher-order functions in JavaScript are functions that take other functions as arguments or return functions as results. They enable writing more modular, reusable, and declarative code, facilitating functional programming."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son las Funciones de Orden Superior?",
        en: "üîπWhat are Higher-Order Functions?"
      },
      code: `function higherOrderFunction(callback) {
  console.log('Ejecutando funci√≥n de orden superior');
  callback();
}`,
      content: {
        es: "Una funci√≥n de orden superior es una funci√≥n que puede recibir otra funci√≥n como argumento o devolver una funci√≥n como resultado. Este concepto es clave en la programaci√≥n funcional y permite abstraer comportamientos comunes, como iteraciones o transformaciones de datos, en funciones reutilizables.",
        en: "A higher-order function is a function that can receive another function as an argument or return a function as a result. This concept is key in functional programming and allows abstracting common behaviors, such as iterations or data transformations, into reusable functions."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Funciones de Orden Superior?",
        en: "üîπWhen to use Higher-Order Functions?"
      },
      content: {
        es: [
          "Cuando necesitas abstraer comportamientos repetitivos en funciones reutilizables.",
          "Cuando deseas trabajar con colecciones de datos usando m√©todos como `map`, `filter` o `reduce`.",
          "Cuando quieres implementar patrones de programaci√≥n funcional para mejorar la legibilidad del c√≥digo."
        ],
        en: [
          "When you need to abstract repetitive behaviors into reusable functions.",
          "When working with collections of data using methods like `map`, `filter`, or `reduce`.",
          "When you want to implement functional programming patterns to improve code readability."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre Funciones de Orden Superior y Bucles Tradicionales",
        en: "üîπComparison between Higher-Order Functions and Traditional Loops"
      },
      headers: {
        es: ["Caracter√≠stica", "Funciones de Orden Superior", "Bucles Tradicionales"],
        en: ["Feature", "Higher-Order Functions", "Traditional Loops"]
      },
      rows: [
        {
          es: ["Legibilidad", "‚úÖ M√°s declarativa", "‚ùå Menos declarativa"],
          en: ["Readability", "‚úÖ More declarative", "‚ùå Less declarative"]
        },
        {
          es: ["Reutilizaci√≥n", "‚úÖ Alta (funciones reutilizables)", "‚ùå Baja (c√≥digo repetitivo)"],
          en: ["Reusability", "‚úÖ High (reusable functions)", "‚ùå Low (repetitive code)"]
        },
        {
          es: ["Manejo de errores", "‚úÖ Mejor (encadenamiento)", "‚ùå Manual (m√°s complejo)"],
          en: ["Error handling", "‚úÖ Better (chaining)", "‚ùå Manual (more complex)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Funciones de Orden Superior",
        en: "1Ô∏è‚É£ Practical example of Higher-Order Functions"
      },
      caseTitle: {
        es: "Uso b√°sico de una funci√≥n de orden superior",
        en: "Basic usage of a higher-order function"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo una funci√≥n de orden superior puede recibir otra funci√≥n como argumento y ejecutarla.",
        en: "This example demonstrates how a higher-order function can receive another function as an argument and execute it."
      },
      code: `function greet(name, callback) {
  console.log('Hello, ' + name);
  callback();
}

function sayGoodbye() {
  console.log('Goodbye!');
}

greet('Alice', sayGoodbye);`,
      conclusion: {
        es: "üî• Beneficio: Las funciones de orden superior permiten encapsular comportamientos espec√≠ficos en funciones reutilizables.",
        en: "üî• Benefit: Higher-order functions allow encapsulating specific behaviors into reusable functions."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Funciones de Orden Superior",
        en: "2Ô∏è‚É£ Practical example of Higher-Order Functions"
      },
      caseTitle: {
        es: "Transformaci√≥n de datos con `map`",
        en: "Data transformation with `map`"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar la funci√≥n de orden superior `map` para transformar una lista de n√∫meros.",
        en: "This example demonstrates how to use the higher-order function `map` to transform a list of numbers."
      },
      code: `const numbers = [1, 2, 3, 4];
const doubled = numbers.map(function (num) {
  return num * 2;
});

console.log(doubled); // [2, 4, 6, 8]`,
      conclusion: {
        es: "üî• Beneficio: `map` es una funci√≥n de orden superior que simplifica la transformaci√≥n de datos en colecciones.",
        en: "üî• Benefit: `map` is a higher-order function that simplifies data transformation in collections."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Funciones de Orden Superior",
        en: "3Ô∏è‚É£ Practical example of Higher-Order Functions"
      },
      caseTitle: {
        es: "Filtrado de datos con `filter`",
        en: "Data filtering with `filter`"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar la funci√≥n de orden superior `filter` para filtrar elementos de una lista.",
        en: "This example demonstrates how to use the higher-order function `filter` to filter elements from a list."
      },
      code: `const numbers = [10, 25, 30, 45];
const evenNumbers = numbers.filter(function (num) {
  return num % 2 === 0;
});

console.log(evenNumbers); // [10, 30]`,
      conclusion: {
        es: "üî• Beneficio: `filter` es una funci√≥n de orden superior que facilita el filtrado de datos en colecciones.",
        en: "üî• Benefit: `filter` is a higher-order function that facilitates data filtering in collections."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Funciones de Orden Superior?",
        en: "üìå When NOT to use Higher-Order Functions?"
      },
      content: {
        es: [
          "‚ùå Si el uso de funciones de orden superior introduce complejidad innecesaria en casos simples.",
          "‚ùå Si prefieres un enfoque imperativo m√°s directo para resolver problemas espec√≠ficos.",
          "‚ùå Si el rendimiento es cr√≠tico y las funciones de orden superior generan sobrecarga significativa."
        ],
        en: [
          "‚ùå If using higher-order functions introduces unnecessary complexity in simple cases.",
          "‚ùå If you prefer a more direct imperative approach for solving specific problems.",
          "‚ùå If performance is critical and higher-order functions introduce significant overhead."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Las funciones de orden superior son ideales para abstraer comportamientos comunes y escribir c√≥digo declarativo.",
      "‚úÖ Facilitan la manipulaci√≥n de colecciones de datos y promueven la reutilizaci√≥n de c√≥digo.",
      "‚úÖ No deben usarse en exceso si el proyecto no requiere su funcionalidad espec√≠fica o si el rendimiento es cr√≠tico."
    ],
    en: [
      "‚úÖ Higher-order functions are ideal for abstracting common behaviors and writing declarative code.",
      "‚úÖ They facilitate the manipulation of data collections and promote code reuse.",
      "‚úÖ They should not be overused if the project does not require their specific functionality or if performance is critical."
    ]
  }
};

export default concept;