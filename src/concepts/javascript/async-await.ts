import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "async/await en JavaScript",
    en: "async/await in JavaScript"
  },
  slug: "async-await",
  description: {
    es: "La sintaxis async/await en JavaScript permite manejar operaciones as√≠ncronas de manera m√°s limpia y legible. Convierte el c√≥digo basado en Promises en una estructura similar a c√≥digo s√≠ncrono, facilitando su comprensi√≥n y mantenimiento.",
    en: "The async/await syntax in JavaScript allows handling asynchronous operations in a cleaner and more readable way. It transforms Promise-based code into a structure similar to synchronous code, making it easier to understand and maintain."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© es async/await?",
        en: "üîπWhat is async/await?"
      },
      code: `async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error capturado:', error.message);
  }
}`,
      content: {
        es: "La sintaxis `async/await` es una forma moderna de trabajar con Promises en JavaScript. Una funci√≥n marcada como `async` siempre devuelve una Promise, y la palabra clave `await` pausa la ejecuci√≥n de la funci√≥n hasta que la Promise se resuelve. Esto permite escribir c√≥digo as√≠ncrono de manera m√°s lineal y legible.",
        en: "The `async/await` syntax is a modern way to work with Promises in JavaScript. A function marked as `async` always returns a Promise, and the `await` keyword pauses the execution of the function until the Promise resolves. This allows writing asynchronous code in a more linear and readable manner."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar async/await?",
        en: "üîπWhen to use async/await?"
      },
      content: {
        es: [
          "Cuando necesitas manejar operaciones as√≠ncronas complejas, como solicitudes HTTP o lectura de archivos.",
          "Cuando deseas escribir c√≥digo as√≠ncrono m√°s limpio y legible, evitando el encadenamiento excesivo de Promises.",
          "Cuando trabajas con APIs modernas que devuelven Promises, como Fetch API."
        ],
        en: [
          "When you need to handle complex asynchronous operations, such as HTTP requests or file reading.",
          "When you want to write cleaner and more readable asynchronous code, avoiding excessive Promise chaining.",
          "When working with modern APIs that return Promises, such as the Fetch API."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπComparaci√≥n entre async/await y Promises",
        en: "üîπComparison between async/await and Promises"
      },
      headers: {
        es: ["Caracter√≠stica", "async/await", "Promises"],
        en: ["Feature", "async/await", "Promises"]
      },
      rows: [
        {
          es: ["Legibilidad", "‚úÖ M√°s legible", "‚ùå Menos legible (encadenamiento)"],
          en: ["Readability", "‚úÖ More readable", "‚ùå Less readable (chaining)"]
        },
        {
          es: ["Manejo de errores", "‚úÖ Centralizado (try/catch)", "‚ùå Descentralizado (.catch)"],
          en: ["Error handling", "‚úÖ Centralized (try/catch)", "‚ùå Decentralized (.catch)"]
        },
        {
          es: ["Flexibilidad", "‚úÖ Alto (parecido a c√≥digo s√≠ncrono)", "‚úÖ Alto (basado en Promises)"],
          en: ["Flexibility", "‚úÖ High (similar to synchronous code)", "‚úÖ High (Promise-based)"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de async/await",
        en: "1Ô∏è‚É£ Practical example of async/await"
      },
      caseTitle: {
        es: "Uso b√°sico de async/await",
        en: "Basic usage of async/await"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar async/await para manejar una solicitud HTTP con Fetch API.",
        en: "This example demonstrates how to use async/await to handle an HTTP request with Fetch API."
      },
      code: `async function fetchData() {
  try {
    const response = await fetch('https://api.example.com/data');
    if (!response.ok) {
      throw new Error('Error en la solicitud');
    }
    const data = await response.json();
    console.log('Datos recibidos:', data);
  } catch (error) {
    console.error('Error capturado:', error.message);
  }
}

fetchData();`,
      conclusion: {
        es: "üî• Beneficio: async/await simplifica el manejo de operaciones as√≠ncronas, haciendo que el c√≥digo sea m√°s legible y f√°cil de mantener.",
        en: "üî• Benefit: async/await simplifies handling asynchronous operations, making the code more readable and easier to maintain."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de async/await",
        en: "2Ô∏è‚É£ Practical example of async/await"
      },
      caseTitle: {
        es: "Encadenamiento de operaciones as√≠ncronas",
        en: "Chaining asynchronous operations"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar async/await para realizar m√∫ltiples operaciones as√≠ncronas en secuencia.",
        en: "This example demonstrates how to use async/await to perform multiple asynchronous operations in sequence."
      },
      code: `async function processUserData() {
  try {
    const userResponse = await fetch('https://api.example.com/user');
    const user = await userResponse.json();

    const postsResponse = await fetch("https://api.example.com/posts?userId=${'user.id'}");
    const posts = await postsResponse.json();

    console.log('Usuario:', user);
    console.log('Publicaciones:', posts);
  } catch (error) {
    console.error('Error capturado:', error.message);
  }
}

processUserData();`,
      conclusion: {
        es: "üî• Beneficio: async/await permite realizar operaciones as√≠ncronas secuenciales de manera clara y estructurada.",
        en: "üî• Benefit: async/await allows performing sequential asynchronous operations in a clear and structured way."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de async/await",
        en: "3Ô∏è‚É£ Practical example of async/await"
      },
      caseTitle: {
        es: "Manejo de errores con try/catch",
        en: "Error handling with try/catch"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar try/catch con async/await para manejar errores de manera centralizada.",
        en: "This example demonstrates how to use try/catch with async/await to handle errors in a centralized way."
      },
      code: `async function riskyOperation() {
  throw new Error('Algo sali√≥ mal');
}

async function main() {
  try {
    await riskyOperation();
  } catch (error) {
    console.error('Error capturado:', error.message);
  }
}

main();`,
      conclusion: {
        es: "üî• Beneficio: try/catch con async/await centraliza el manejo de errores, mejorando la robustez del c√≥digo.",
        en: "üî• Benefit: try/catch with async/await centralizes error handling, improving code robustness."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar async/await?",
        en: "üìå When NOT to use async/await?"
      },
      content: {
        es: [
          "‚ùå Si el uso de async/await introduce complejidad innecesaria en casos simples.",
          "‚ùå Si prefieres el encadenamiento tradicional de Promises para operaciones sencillas.",
          "‚ùå Si el proyecto requiere un manejo avanzado de errores que no dependa exclusivamente de async/await."
        ],
        en: [
          "‚ùå If using async/await introduces unnecessary complexity in simple cases.",
          "‚ùå If you prefer traditional Promise chaining for simple operations.",
          "‚ùå If the project requires advanced error handling that does not rely exclusively on async/await."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ async/await es ideal para manejar operaciones as√≠ncronas de manera limpia y legible.",
      "‚úÖ Facilita el manejo de errores y mejora la estructura del c√≥digo.",
      "‚úÖ No debe usarse en exceso si el manejo de operaciones as√≠ncronas puede resolverse de forma m√°s sencilla con Promises."
    ],
    en: [
      "‚úÖ async/await is ideal for handling asynchronous operations in a clean and readable way.",
      "‚úÖ It facilitates error handling and improves code structure.",
      "‚úÖ It should not be overused if asynchronous operations can be resolved more simply with Promises."
    ]
  }
};

export default concept;