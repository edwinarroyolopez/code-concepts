import { Concept } from "@/types/concept";

const concept: Concept = {
  title: {
    es: "Unidades y Valores en CSS",
    en: "Units and Values in CSS"
  },
  slug: "css-units-values",
  description: {
    es: "Las unidades y valores en CSS permiten definir dimensiones, colores, espaciado y otros estilos. Comprender las diferentes unidades y c√≥mo usarlas es esencial para crear dise√±os precisos y responsivos.",
    en: "Units and values in CSS allow defining dimensions, colors, spacing, and other styles. Understanding the different units and how to use them is essential for creating precise and responsive designs."
  },
  sections: [
    {
      type: "text",
      title: {
        es: "üîπ¬øQu√© son las Unidades y Valores en CSS?",
        en: "üîπWhat are Units and Values in CSS?"
      },
      code: `/* Ejemplo b√°sico de unidades y valores */
div {
  width: 50%; /* Porcentaje relativo al contenedor padre */
  height: 200px; /* P√≠xeles fijos */
  margin: 1em; /* Tama√±o relativo al tama√±o de fuente del elemento */
  background-color: #ff5733; /* Color hexadecimal */
}`,
      content: {
        es: "Las **unidades y valores en CSS** definen c√≥mo se aplican los estilos a los elementos HTML. Las unidades pueden ser absolutas (como p√≠xeles) o relativas (como porcentajes o ems), y los valores incluyen n√∫meros, colores, funciones como `rgb()` o `calc()`, y m√°s. Comprender estas opciones permite crear dise√±os flexibles, responsivos y precisos.",
        en: "Units and values in CSS define how styles are applied to HTML elements. Units can be absolute (like pixels) or relative (like percentages or ems), and values include numbers, colors, functions like `rgb()` or `calc()`, and more. Understanding these options allows for creating flexible, responsive, and precise designs."
      }
    },
    {
      type: "list",
      title: {
        es: "üîπ¬øCu√°ndo usar Unidades y Valores?",
        en: "üîπWhen to use Units and Values?"
      },
      content: {
        es: [
          "Cuando necesitas definir dimensiones precisas para elementos, como anchos, alturas o m√°rgenes.",
          "Cuando deseas crear dise√±os responsivos utilizando unidades relativas como porcentajes o `vw`/`vh`.",
          "Cuando trabajas con colores y necesitas especificarlos en formatos como hexadecimal, RGB o HSL.",
          "Cuando necesitas realizar c√°lculos din√°micos usando funciones como `calc()` o `var()`."
        ],
        en: [
          "When you need to define precise dimensions for elements, such as widths, heights, or margins.",
          "When you want to create responsive designs using relative units like percentages or `vw`/`vh`.",
          "When working with colors and need to specify them in formats like hexadecimal, RGB, or HSL.",
          "When you need to perform dynamic calculations using functions like `calc()` or `var()`."
        ]
      }
    },
    {
      type: "table",
      title: {
        es: "üîπTipos de Unidades y Valores en CSS",
        en: "üîπTypes of Units and Values in CSS"
      },
      headers: {
        es: ["Tipo", "Descripci√≥n", "Ejemplo"],
        en: ["Type", "Description", "Example"]
      },
      rows: [
        {
          es: ["Unidades absolutas", "Medidas fijas que no cambian seg√∫n el contexto", "`px`, `cm`, `in`"],
          en: ["Absolute units", "Fixed measurements that do not change based on context", "`px`, `cm`, `in`"]
        },
        {
          es: ["Unidades relativas", "Medidas que dependen del contexto del elemento", "`%`, `em`, `rem`, `vw`, `vh`"],
          en: ["Relative units", "Measurements that depend on the element's context", "`%`, `em`, `rem`, `vw`, `vh`"]
        },
        {
          es: ["Colores", "Valores que representan colores", "`#ff5733`, `rgb(255, 87, 51)`, `hsl(9, 100%, 60%)`"],
          en: ["Colors", "Values that represent colors", "`#ff5733`, `rgb(255, 87, 51)`, `hsl(9, 100%, 60%)`"]
        },
        {
          es: ["Funciones", "Expresiones que calculan valores din√°micamente", "`calc(100% - 20px)`, `var(--main-color)`"],
          en: ["Functions", "Expressions that calculate values dynamically", "`calc(100% - 20px)`, `var(--main-color)`"]
        }
      ]
    },
    {
      type: "example",
      title: {
        es: "1Ô∏è‚É£ Ejemplo pr√°ctico de Unidades Relativas",
        en: "1Ô∏è‚É£ Practical example of Relative Units"
      },
      caseTitle: {
        es: "Crear un Dise√±o Responsivo Usando `vw` y `vh`",
        en: "Create a Responsive Design Using `vw` and `vh`"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar unidades relativas como `vw` (viewport width) y `vh` (viewport height) para crear un dise√±o responsivo.",
        en: "This example demonstrates how to use relative units like `vw` (viewport width) and `vh` (viewport height) to create a responsive design."
      },
      code: `div {
  width: 50vw; /* 50% del ancho de la ventana */
  height: 50vh; /* 50% del alto de la ventana */
  background-color: lightblue;
}

<!-- HTML -->
<div></div>`,
      conclusion: {
        es: "üî• Beneficio: Las unidades relativas como `vw` y `vh` permiten crear dise√±os que se adaptan autom√°ticamente al tama√±o de la ventana del navegador.",
        en: "üî• Benefit: Relative units like `vw` and `vh` allow creating designs that automatically adapt to the browser window size."
      }
    },
    {
      type: "example",
      title: {
        es: "2Ô∏è‚É£ Ejemplo pr√°ctico de Colores",
        en: "2Ô∏è‚É£ Practical example of Colors"
      },
      caseTitle: {
        es: "Definir Colores Usando Diferentes Formatos",
        en: "Define Colors Using Different Formats"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo definir colores en CSS utilizando diferentes formatos como hexadecimal, RGB y HSL.",
        en: "This example demonstrates how to define colors in CSS using different formats like hexadecimal, RGB, and HSL."
      },
      code: `.box1 {
  background-color: #ff5733; /* Hexadecimal */
}

.box2 {
  background-color: rgb(255, 87, 51); /* RGB */
}

.box3 {
  background-color: hsl(9, 100%, 60%); /* HSL */
}

<!-- HTML -->
<div class="box1"></div>
<div class="box2"></div>
<div class="box3"></div>`,
      conclusion: {
        es: "üî• Beneficio: Los diferentes formatos de color ofrecen flexibilidad para definir y ajustar colores seg√∫n las necesidades del dise√±o.",
        en: "üî• Benefit: The different color formats offer flexibility to define and adjust colors according to design needs."
      }
    },
    {
      type: "example",
      title: {
        es: "3Ô∏è‚É£ Ejemplo pr√°ctico de Funciones Din√°micas",
        en: "3Ô∏è‚É£ Practical example of Dynamic Functions"
      },
      caseTitle: {
        es: "Usar `calc()` para Calcular Dimensiones Din√°micamente",
        en: "Use `calc()` to Dynamically Calculate Dimensions"
      },
      caseDescription: {
        es: "Este ejemplo muestra c√≥mo usar la funci√≥n `calc()` para calcular dimensiones din√°micamente basadas en otras propiedades.",
        en: "This example demonstrates how to use the `calc()` function to dynamically calculate dimensions based on other properties."
      },
      code: `div {
  width: calc(100% - 40px); /* Ancho total menos 40px */
  padding: 20px;
  background-color: lightgreen;
}

<!-- HTML -->
<div>Contenido</div>`,
      conclusion: {
        es: "üî• Beneficio: La funci√≥n `calc()` permite realizar c√°lculos din√°micos, lo que facilita la creaci√≥n de dise√±os flexibles y precisos.",
        en: "üî• Benefit: The `calc()` function allows dynamic calculations, making it easier to create flexible and precise designs."
      }
    },
    {
      type: "list",
      title: {
        es: "üìå ¬øCu√°ndo NO usar Unidades y Valores Espec√≠ficos?",
        en: "üìå When NOT to use Specific Units and Values?"
      },
      content: {
        es: [
          "‚ùå Si prefieres evitar unidades fijas como `px` en dise√±os responsivos, ya que no se adaptan bien a diferentes tama√±os de pantalla.",
          "‚ùå Si usas valores absolutos en lugar de variables (`var()`) para estilos reutilizables, lo que puede complicar el mantenimiento.",
          "‚ùå Si seleccionas colores directamente sin considerar accesibilidad o consistencia en el dise√±o."
        ],
        en: [
          "‚ùå If you prefer to avoid fixed units like `px` in responsive designs, as they do not adapt well to different screen sizes.",
          "‚ùå If you use absolute values instead of variables (`var()`) for reusable styles, which can complicate maintenance.",
          "‚ùå If you select colors directly without considering accessibility or design consistency."
        ]
      }
    }
  ],
  conclusion: {
    es: [
      "‚úÖ Las unidades y valores en CSS son esenciales para definir dimensiones, colores y otros estilos.",
      "‚úÖ Permiten crear dise√±os precisos, responsivos y din√°micos.",
      "‚úÖ No deben usarse si complican el dise√±o o si existen alternativas m√°s eficientes, como variables o unidades relativas."
    ],
    en: [
      "‚úÖ Units and values in CSS are essential for defining dimensions, colors, and other styles.",
      "‚úÖ They allow creating precise, responsive, and dynamic designs.",
      "‚úÖ They should not be used if they complicate the design or if more efficient alternatives, like variables or relative units, exist."
    ]
  }
};

export default concept;